// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: tech_tags.sql

package repository

import (
	"context"
)

const deleteTechTagByID = `-- name: DeleteTechTagByID :exec
DELETE FROM tech_tags WHERE tech_tag_id = $1
`

func (q *Queries) DeleteTechTagByID(ctx context.Context, techTagID int32) error {
	_, err := q.db.ExecContext(ctx, deleteTechTagByID, techTagID)
	return err
}

const getTechTagByID = `-- name: GetTechTagByID :one
SELECT tech_tag_id, language FROM tech_tags WHERE tech_tag_id = $1
`

func (q *Queries) GetTechTagByID(ctx context.Context, techTagID int32) (TechTag, error) {
	row := q.db.QueryRowContext(ctx, getTechTagByID, techTagID)
	var i TechTag
	err := row.Scan(&i.TechTagID, &i.Language)
	return i, err
}

const listTechTag = `-- name: ListTechTag :many
SELECT tech_tag_id, language FROM tech_tags
`

func (q *Queries) ListTechTag(ctx context.Context) ([]TechTag, error) {
	rows, err := q.db.QueryContext(ctx, listTechTag)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TechTag{}
	for rows.Next() {
		var i TechTag
		if err := rows.Scan(&i.TechTagID, &i.Language); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTechTagByID = `-- name: UpdateTechTagByID :one
UPDATE tech_tags SET language = $1 WHERE tech_tag_id = $1 RETURNING tech_tag_id, language
`

func (q *Queries) UpdateTechTagByID(ctx context.Context, language string) (TechTag, error) {
	row := q.db.QueryRowContext(ctx, updateTechTagByID, language)
	var i TechTag
	err := row.Scan(&i.TechTagID, &i.Language)
	return i, err
}
