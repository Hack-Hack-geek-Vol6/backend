// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: frameworks.sql

package repository

import (
	"context"
)

const createFrameworks = `-- name: CreateFrameworks :one
INSERT INTO
  frameworks (framework, tech_tag_id)
VALUES
($1, $2) RETURNING framework_id, tech_tag_id, framework, icon
`

type CreateFrameworksParams struct {
	Framework string `json:"framework"`
	TechTagID int32  `json:"tech_tag_id"`
}

func (q *Queries) CreateFrameworks(ctx context.Context, arg CreateFrameworksParams) (Framework, error) {
	row := q.db.QueryRowContext(ctx, createFrameworks, arg.Framework, arg.TechTagID)
	var i Framework
	err := row.Scan(
		&i.FrameworkID,
		&i.TechTagID,
		&i.Framework,
		&i.Icon,
	)
	return i, err
}

const deleteFrameworksByID = `-- name: DeleteFrameworksByID :exec
DELETE FROM frameworks
WHERE framework_id = $1
`

func (q *Queries) DeleteFrameworksByID(ctx context.Context, frameworkID int32) error {
	_, err := q.db.ExecContext(ctx, deleteFrameworksByID, frameworkID)
	return err
}

const getFrameworksByID = `-- name: GetFrameworksByID :one
SELECT framework_id, tech_tag_id, framework, icon
FROM frameworks
WHERE framework_id = $1
`

func (q *Queries) GetFrameworksByID(ctx context.Context, frameworkID int32) (Framework, error) {
	row := q.db.QueryRowContext(ctx, getFrameworksByID, frameworkID)
	var i Framework
	err := row.Scan(
		&i.FrameworkID,
		&i.TechTagID,
		&i.Framework,
		&i.Icon,
	)
	return i, err
}

const listFrameworks = `-- name: ListFrameworks :many
SELECT framework_id, tech_tag_id, framework, icon
FROM frameworks
`

func (q *Queries) ListFrameworks(ctx context.Context) ([]Framework, error) {
	rows, err := q.db.QueryContext(ctx, listFrameworks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Framework{}
	for rows.Next() {
		var i Framework
		if err := rows.Scan(
			&i.FrameworkID,
			&i.TechTagID,
			&i.Framework,
			&i.Icon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFrameworksByID = `-- name: UpdateFrameworksByID :one
UPDATE frameworks
SET framework = $1,
    tech_tag_id = $2
WHERE framework_id = $3
RETURNING framework_id, tech_tag_id, framework, icon
`

type UpdateFrameworksByIDParams struct {
	Framework   string `json:"framework"`
	TechTagID   int32  `json:"tech_tag_id"`
	FrameworkID int32  `json:"framework_id"`
}

func (q *Queries) UpdateFrameworksByID(ctx context.Context, arg UpdateFrameworksByIDParams) (Framework, error) {
	row := q.db.QueryRowContext(ctx, updateFrameworksByID, arg.Framework, arg.TechTagID, arg.FrameworkID)
	var i Framework
	err := row.Scan(
		&i.FrameworkID,
		&i.TechTagID,
		&i.Framework,
		&i.Icon,
	)
	return i, err
}
