// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: account_tags.sql

package repository

import (
	"context"
	"database/sql"
)

const createAccountTags = `-- name: CreateAccountTags :one
INSERT INTO
    account_tags (user_id, tech_tag_id)
VALUES
($1, $2) RETURNING user_id, tech_tag_id
`

type CreateAccountTagsParams struct {
	UserID    string `json:"user_id"`
	TechTagID int32  `json:"tech_tag_id"`
}

func (q *Queries) CreateAccountTags(ctx context.Context, arg CreateAccountTagsParams) (AccountTag, error) {
	row := q.db.QueryRowContext(ctx, createAccountTags, arg.UserID, arg.TechTagID)
	var i AccountTag
	err := row.Scan(&i.UserID, &i.TechTagID)
	return i, err
}

const deleteAccounttagsByUserID = `-- name: DeleteAccounttagsByUserID :exec
DELETE FROM
    account_tags
WHERE
    user_id = $1
`

func (q *Queries) DeleteAccounttagsByUserID(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteAccounttagsByUserID, userID)
	return err
}

const listAccountTagsByUserID = `-- name: ListAccountTagsByUserID :many
SELECT
    tech_tags.tech_tag_id,
    tech_tags.language
FROM
    account_tags
    LEFT OUTER JOIN tech_tags ON account_tags.tech_tag_id = tech_tags.tech_tag_id
WHERE
    account_tags.user_id = $1
`

type ListAccountTagsByUserIDRow struct {
	TechTagID sql.NullInt32  `json:"tech_tag_id"`
	Language  sql.NullString `json:"language"`
}

func (q *Queries) ListAccountTagsByUserID(ctx context.Context, userID string) ([]ListAccountTagsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listAccountTagsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAccountTagsByUserIDRow{}
	for rows.Next() {
		var i ListAccountTagsByUserIDRow
		if err := rows.Scan(&i.TechTagID, &i.Language); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
