// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: past_works.sql

package repository

import (
	"context"
	"database/sql"
	"time"
)

const createPastWorks = `-- name: CreatePastWorks :one
INSERT INTO past_works (
    name,
    thumbnail_image,
    explanatory_text,
    award_data_id
  )
VALUES ($1, $2, $3, $4)
RETURNING opus, name, thumbnail_image, explanatory_text, award_data_id, create_at, update_at, is_delete
`

type CreatePastWorksParams struct {
	Name            string        `json:"name"`
	ThumbnailImage  string        `json:"thumbnail_image"`
	ExplanatoryText string        `json:"explanatory_text"`
	AwardDataID     sql.NullInt32 `json:"award_data_id"`
}

func (q *Queries) CreatePastWorks(ctx context.Context, arg CreatePastWorksParams) (PastWork, error) {
	row := q.db.QueryRowContext(ctx, createPastWorks,
		arg.Name,
		arg.ThumbnailImage,
		arg.ExplanatoryText,
		arg.AwardDataID,
	)
	var i PastWork
	err := row.Scan(
		&i.Opus,
		&i.Name,
		&i.ThumbnailImage,
		&i.ExplanatoryText,
		&i.AwardDataID,
		&i.CreateAt,
		&i.UpdateAt,
		&i.IsDelete,
	)
	return i, err
}

const deletePastWorksByID = `-- name: DeletePastWorksByID :one
UPDATE past_works
SET is_delete = $1
WHERE opus = $2
RETURNING opus, name, thumbnail_image, explanatory_text, award_data_id, create_at, update_at, is_delete
`

type DeletePastWorksByIDParams struct {
	IsDelete bool  `json:"is_delete"`
	Opus     int32 `json:"opus"`
}

func (q *Queries) DeletePastWorksByID(ctx context.Context, arg DeletePastWorksByIDParams) (PastWork, error) {
	row := q.db.QueryRowContext(ctx, deletePastWorksByID, arg.IsDelete, arg.Opus)
	var i PastWork
	err := row.Scan(
		&i.Opus,
		&i.Name,
		&i.ThumbnailImage,
		&i.ExplanatoryText,
		&i.AwardDataID,
		&i.CreateAt,
		&i.UpdateAt,
		&i.IsDelete,
	)
	return i, err
}

const getPastWorksByOpus = `-- name: GetPastWorksByOpus :one
SELECT opus, name, thumbnail_image, explanatory_text, award_data_id, create_at, update_at, is_delete
FROM past_works
WHERE opus = $1
`

func (q *Queries) GetPastWorksByOpus(ctx context.Context, opus int32) (PastWork, error) {
	row := q.db.QueryRowContext(ctx, getPastWorksByOpus, opus)
	var i PastWork
	err := row.Scan(
		&i.Opus,
		&i.Name,
		&i.ThumbnailImage,
		&i.ExplanatoryText,
		&i.AwardDataID,
		&i.CreateAt,
		&i.UpdateAt,
		&i.IsDelete,
	)
	return i, err
}

const listPastWorks = `-- name: ListPastWorks :many
SELECT opus,
  name,
  explanatory_text
FROM past_works
LIMIT $1 OFFSET $2
`

type ListPastWorksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListPastWorksRow struct {
	Opus            int32  `json:"opus"`
	Name            string `json:"name"`
	ExplanatoryText string `json:"explanatory_text"`
}

func (q *Queries) ListPastWorks(ctx context.Context, arg ListPastWorksParams) ([]ListPastWorksRow, error) {
	rows, err := q.db.QueryContext(ctx, listPastWorks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPastWorksRow{}
	for rows.Next() {
		var i ListPastWorksRow
		if err := rows.Scan(&i.Opus, &i.Name, &i.ExplanatoryText); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePastWorksByID = `-- name: UpdatePastWorksByID :one
UPDATE past_works
SET name = $1,
  thumbnail_image = $2,
  explanatory_text = $3,
  award_data_id = $4,
  update_at = $5
WHERE opus = $6
RETURNING opus, name, thumbnail_image, explanatory_text, award_data_id, create_at, update_at, is_delete
`

type UpdatePastWorksByIDParams struct {
	Name            string        `json:"name"`
	ThumbnailImage  string        `json:"thumbnail_image"`
	ExplanatoryText string        `json:"explanatory_text"`
	AwardDataID     sql.NullInt32 `json:"award_data_id"`
	UpdateAt        time.Time     `json:"update_at"`
	Opus            int32         `json:"opus"`
}

func (q *Queries) UpdatePastWorksByID(ctx context.Context, arg UpdatePastWorksByIDParams) (PastWork, error) {
	row := q.db.QueryRowContext(ctx, updatePastWorksByID,
		arg.Name,
		arg.ThumbnailImage,
		arg.ExplanatoryText,
		arg.AwardDataID,
		arg.UpdateAt,
		arg.Opus,
	)
	var i PastWork
	err := row.Scan(
		&i.Opus,
		&i.Name,
		&i.ThumbnailImage,
		&i.ExplanatoryText,
		&i.AwardDataID,
		&i.CreateAt,
		&i.UpdateAt,
		&i.IsDelete,
	)
	return i, err
}
