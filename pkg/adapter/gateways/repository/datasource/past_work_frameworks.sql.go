// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: past_work_frameworks.sql

package repository

import (
	"context"
)

const createPastWorkFrameworks = `-- name: CreatePastWorkFrameworks :one
INSERT INTO past_work_frameworks (opus, framework_id)
VALUES ($1, $2)
RETURNING opus, framework_id
`

type CreatePastWorkFrameworksParams struct {
	Opus        int32 `json:"opus"`
	FrameworkID int32 `json:"framework_id"`
}

func (q *Queries) CreatePastWorkFrameworks(ctx context.Context, arg CreatePastWorkFrameworksParams) (PastWorkFramework, error) {
	row := q.db.QueryRowContext(ctx, createPastWorkFrameworks, arg.Opus, arg.FrameworkID)
	var i PastWorkFramework
	err := row.Scan(&i.Opus, &i.FrameworkID)
	return i, err
}

const deletePastWorkFrameworksByOpus = `-- name: DeletePastWorkFrameworksByOpus :exec
DELETE FROM past_work_frameworks
WHERE opus = $1
`

func (q *Queries) DeletePastWorkFrameworksByOpus(ctx context.Context, opus int32) error {
	_, err := q.db.ExecContext(ctx, deletePastWorkFrameworksByOpus, opus)
	return err
}

const listPastWorkFrameworksByOpus = `-- name: ListPastWorkFrameworksByOpus :many
SELECT opus, framework_id
FROM past_work_frameworks
WHERE opus = $1
`

func (q *Queries) ListPastWorkFrameworksByOpus(ctx context.Context, opus int32) ([]PastWorkFramework, error) {
	rows, err := q.db.QueryContext(ctx, listPastWorkFrameworksByOpus, opus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PastWorkFramework{}
	for rows.Next() {
		var i PastWorkFramework
		if err := rows.Scan(&i.Opus, &i.FrameworkID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
