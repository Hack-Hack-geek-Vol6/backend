// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: like.sql

package repository

import (
	"context"
)

const createLikes = `-- name: CreateLikes :one
INSERT INTO likes(opus, account_id)
VALUES ($1, $2)
RETURNING opus, account_id, create_at, is_delete
`

type CreateLikesParams struct {
	Opus      int32  `json:"opus"`
	AccountID string `json:"account_id"`
}

func (q *Queries) CreateLikes(ctx context.Context, arg CreateLikesParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, createLikes, arg.Opus, arg.AccountID)
	var i Like
	err := row.Scan(
		&i.Opus,
		&i.AccountID,
		&i.CreateAt,
		&i.IsDelete,
	)
	return i, err
}

const deleteLikesByID = `-- name: DeleteLikesByID :exec
DELETE FROM likes
WHERE opus = $1
    AND account_id = $2
`

type DeleteLikesByIDParams struct {
	Opus      int32  `json:"opus"`
	AccountID string `json:"account_id"`
}

func (q *Queries) DeleteLikesByID(ctx context.Context, arg DeleteLikesByIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteLikesByID, arg.Opus, arg.AccountID)
	return err
}

const getLikeStatusByID = `-- name: GetLikeStatusByID :one
SELECT opus, account_id, create_at, is_delete
FROM likes
WHERE opus = $1
    AND account_id = $2
    AND is_delete = false
`

type GetLikeStatusByIDParams struct {
	Opus      int32  `json:"opus"`
	AccountID string `json:"account_id"`
}

func (q *Queries) GetLikeStatusByID(ctx context.Context, arg GetLikeStatusByIDParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, getLikeStatusByID, arg.Opus, arg.AccountID)
	var i Like
	err := row.Scan(
		&i.Opus,
		&i.AccountID,
		&i.CreateAt,
		&i.IsDelete,
	)
	return i, err
}

const getListCountByOpus = `-- name: GetListCountByOpus :one
SELECT count(*)
FROM likes
WHERE opus = $1
    AND is_delete = false
`

func (q *Queries) GetListCountByOpus(ctx context.Context, opus int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getListCountByOpus, opus)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listLikesByID = `-- name: ListLikesByID :many
SELECT opus, account_id, create_at, is_delete
FROM likes
WHERE account_id = $1
    AND is_delete = false
`

func (q *Queries) ListLikesByID(ctx context.Context, accountID string) ([]Like, error) {
	rows, err := q.db.QueryContext(ctx, listLikesByID, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Like{}
	for rows.Next() {
		var i Like
		if err := rows.Scan(
			&i.Opus,
			&i.AccountID,
			&i.CreateAt,
			&i.IsDelete,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
