// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: like.sql

package repository

import (
	"context"
)

const createLikes = `-- name: CreateLikes :one
INSERT INTO
    likes(opus, account_id)
VALUES
    ($1, $2) RETURNING opus, account_id, create_at, is_delete
`

type CreateLikesParams struct {
	Opus      int32  `json:"opus"`
	AccountID string `json:"account_id"`
}

func (q *Queries) CreateLikes(ctx context.Context, arg CreateLikesParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, createLikes, arg.Opus, arg.AccountID)
	var i Like
	err := row.Scan(
		&i.Opus,
		&i.AccountID,
		&i.CreateAt,
		&i.IsDelete,
	)
	return i, err
}

const deleteLikesByID = `-- name: DeleteLikesByID :one
UPDATE
    likes
SET
    is_delete = true
WHERE
    account_id = $1
    AND opus = $2 RETURNING opus, account_id, create_at, is_delete
`

type DeleteLikesByIDParams struct {
	AccountID string `json:"account_id"`
	Opus      int32  `json:"opus"`
}

func (q *Queries) DeleteLikesByID(ctx context.Context, arg DeleteLikesByIDParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, deleteLikesByID, arg.AccountID, arg.Opus)
	var i Like
	err := row.Scan(
		&i.Opus,
		&i.AccountID,
		&i.CreateAt,
		&i.IsDelete,
	)
	return i, err
}

const listLikesByID = `-- name: ListLikesByID :many
SELECT
    opus, account_id, create_at, is_delete
FROM
    likes
WHERE
    account_id = $1 AND is_delete = false
`

func (q *Queries) ListLikesByID(ctx context.Context, accountID string) ([]Like, error) {
	rows, err := q.db.QueryContext(ctx, listLikesByID, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Like{}
	for rows.Next() {
		var i Like
		if err := rows.Scan(
			&i.Opus,
			&i.AccountID,
			&i.CreateAt,
			&i.IsDelete,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
