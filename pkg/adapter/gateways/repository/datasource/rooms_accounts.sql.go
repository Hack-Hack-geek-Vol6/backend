// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: rooms_accounts.sql

package repository

import (
	"context"
	"database/sql"
	"time"
)

const createRoomsAccounts = `-- name: CreateRoomsAccounts :one
INSERT INTO rooms_accounts (
    account_id,
    room_id,
    is_owner
)VALUES(
    $1,$2,$3
)RETURNING rooms_account_id, account_id, room_id, is_owner, create_at
`

type CreateRoomsAccountsParams struct {
	AccountID string `json:"account_id"`
	RoomID    string `json:"room_id"`
	IsOwner   bool   `json:"is_owner"`
}

func (q *Queries) CreateRoomsAccounts(ctx context.Context, arg CreateRoomsAccountsParams) (RoomsAccount, error) {
	row := q.db.QueryRowContext(ctx, createRoomsAccounts, arg.AccountID, arg.RoomID, arg.IsOwner)
	var i RoomsAccount
	err := row.Scan(
		&i.RoomsAccountID,
		&i.AccountID,
		&i.RoomID,
		&i.IsOwner,
		&i.CreateAt,
	)
	return i, err
}

const deleteRoomsAccountsByID = `-- name: DeleteRoomsAccountsByID :exec
DELETE FROM rooms_accounts WHERE room_id = $1 AND account_id = $2
`

type DeleteRoomsAccountsByIDParams struct {
	RoomID    string `json:"room_id"`
	AccountID string `json:"account_id"`
}

func (q *Queries) DeleteRoomsAccountsByID(ctx context.Context, arg DeleteRoomsAccountsByIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteRoomsAccountsByID, arg.RoomID, arg.AccountID)
	return err
}

const getRoomsAccountsByID = `-- name: GetRoomsAccountsByID :many
SELECT 
    rooms_accounts.rooms_account_id,
    accounts.account_id, 
    accounts.icon,
    rooms_accounts.is_owner,
    (
        SELECT
            role
        FROM
            rooms_accounts_roles
        LEFT OUTER JOIN
            roles
        ON
            roles.role_id = rooms_accounts_roles.role_id
        WHERE
            rooms_accounts_roles.rooms_account_id = rooms_accounts.rooms_account_id
    ) as roles
FROM 
    rooms_accounts
LEFT OUTER JOIN 
    accounts 
ON 
    rooms_accounts.account_id = accounts.account_id 
WHERE 
    rooms_accounts.room_id = $1
`

type GetRoomsAccountsByIDRow struct {
	RoomsAccountID int32          `json:"rooms_account_id"`
	AccountID      sql.NullString `json:"account_id"`
	Icon           sql.NullString `json:"icon"`
	IsOwner        bool           `json:"is_owner"`
	Roles          sql.NullString `json:"roles"`
}

func (q *Queries) GetRoomsAccountsByID(ctx context.Context, roomID string) ([]GetRoomsAccountsByIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getRoomsAccountsByID, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRoomsAccountsByIDRow{}
	for rows.Next() {
		var i GetRoomsAccountsByIDRow
		if err := rows.Scan(
			&i.RoomsAccountID,
			&i.AccountID,
			&i.Icon,
			&i.IsOwner,
			&i.Roles,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJoinRoomByID = `-- name: ListJoinRoomByID :many
SELECT
    rooms_accounts.room_id,
    rooms.title
FROM
    rooms_accounts
LEFT OUTER JOIN 
    rooms
ON
    rooms_accounts.room_id = rooms.room_id
LEFT OUTER JOIN 
    hackathons
ON
    hackathons.hackathon_id = rooms.hackathon_id
WHERE
    account_id = $1 AND hackathons.expired > $2
`

type ListJoinRoomByIDParams struct {
	AccountID string    `json:"account_id"`
	Expired   time.Time `json:"expired"`
}

type ListJoinRoomByIDRow struct {
	RoomID string         `json:"room_id"`
	Title  sql.NullString `json:"title"`
}

func (q *Queries) ListJoinRoomByID(ctx context.Context, arg ListJoinRoomByIDParams) ([]ListJoinRoomByIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listJoinRoomByID, arg.AccountID, arg.Expired)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListJoinRoomByIDRow{}
	for rows.Next() {
		var i ListJoinRoomByIDRow
		if err := rows.Scan(&i.RoomID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
