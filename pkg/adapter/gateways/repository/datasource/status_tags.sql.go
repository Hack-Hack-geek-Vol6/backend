// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: status_tags.sql

package repository

import (
	"context"
)

const deleteStatusTagsByStatusID = `-- name: DeleteStatusTagsByStatusID :exec
DELETE FROM
    status_tags
WHERE status_id = $1
`

func (q *Queries) DeleteStatusTagsByStatusID(ctx context.Context, statusID int32) error {
	_, err := q.db.ExecContext(ctx, deleteStatusTagsByStatusID, statusID)
	return err
}

const getStatusTagsByHackathonID = `-- name: GetStatusTagsByHackathonID :many
SELECT status_tags.status_id ,status_tags.status
FROM status_tags
LEFT OUTER JOIN hackathon_status_tags
ON status_tags.status_id = hackathon_status_tags.status_id
where hackathon_id = $1
`

func (q *Queries) GetStatusTagsByHackathonID(ctx context.Context, hackathonID int32) ([]StatusTag, error) {
	rows, err := q.db.QueryContext(ctx, getStatusTagsByHackathonID, hackathonID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StatusTag{}
	for rows.Next() {
		var i StatusTag
		if err := rows.Scan(&i.StatusID, &i.Status); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStatusTagsByStatusID = `-- name: GetStatusTagsByStatusID :one
SELECT status_id, status FROM status_tags WHERE status_id = $1
`

func (q *Queries) GetStatusTagsByStatusID(ctx context.Context, statusID int32) (StatusTag, error) {
	row := q.db.QueryRowContext(ctx, getStatusTagsByStatusID, statusID)
	var i StatusTag
	err := row.Scan(&i.StatusID, &i.Status)
	return i, err
}

const listStatusTags = `-- name: ListStatusTags :many
SELECT status_id, status
FROM status_tags
`

func (q *Queries) ListStatusTags(ctx context.Context) ([]StatusTag, error) {
	rows, err := q.db.QueryContext(ctx, listStatusTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StatusTag{}
	for rows.Next() {
		var i StatusTag
		if err := rows.Scan(&i.StatusID, &i.Status); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStatusTagsByStatusID = `-- name: UpdateStatusTagsByStatusID :one
UPDATE
    status_tags
SET
    status = $1
WHERE status_id = $1 RETURNING status_id, status
`

func (q *Queries) UpdateStatusTagsByStatusID(ctx context.Context, status string) (StatusTag, error) {
	row := q.db.QueryRowContext(ctx, updateStatusTagsByStatusID, status)
	var i StatusTag
	err := row.Scan(&i.StatusID, &i.Status)
	return i, err
}
