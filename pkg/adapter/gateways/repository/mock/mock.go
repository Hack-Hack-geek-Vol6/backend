// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/adapter/gateways/repository/transaction/store.go

// Package mock_transaction is a generated GoMock package.
package mock_transaction

import (
	context "context"
	reflect "reflect"

	firestore "cloud.google.com/go/firestore"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	repository "github.com/hackhack-Geek-vol6/backend/pkg/adapter/gateways/repository/datasource"
	domain "github.com/hackhack-Geek-vol6/backend/pkg/domain"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddAccountInRoom mocks base method.
func (m *MockStore) AddAccountInRoom(ctx context.Context, args domain.AddAccountInRoomParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccountInRoom", ctx, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAccountInRoom indicates an expected call of AddAccountInRoom.
func (mr *MockStoreMockRecorder) AddAccountInRoom(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountInRoom", reflect.TypeOf((*MockStore)(nil).AddAccountInRoom), ctx, args)
}

// CreateAccountFrameworks mocks base method.
func (m *MockStore) CreateAccountFrameworks(ctx context.Context, arg repository.CreateAccountFrameworksParams) (repository.AccountFramework, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountFrameworks", ctx, arg)
	ret0, _ := ret[0].(repository.AccountFramework)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountFrameworks indicates an expected call of CreateAccountFrameworks.
func (mr *MockStoreMockRecorder) CreateAccountFrameworks(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountFrameworks", reflect.TypeOf((*MockStore)(nil).CreateAccountFrameworks), ctx, arg)
}

// CreateAccountPastWorks mocks base method.
func (m *MockStore) CreateAccountPastWorks(ctx context.Context, arg repository.CreateAccountPastWorksParams) (repository.AccountPastWork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountPastWorks", ctx, arg)
	ret0, _ := ret[0].(repository.AccountPastWork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountPastWorks indicates an expected call of CreateAccountPastWorks.
func (mr *MockStoreMockRecorder) CreateAccountPastWorks(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountPastWorks", reflect.TypeOf((*MockStore)(nil).CreateAccountPastWorks), ctx, arg)
}

// CreateAccountTags mocks base method.
func (m *MockStore) CreateAccountTags(ctx context.Context, arg repository.CreateAccountTagsParams) (repository.AccountTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountTags", ctx, arg)
	ret0, _ := ret[0].(repository.AccountTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountTags indicates an expected call of CreateAccountTags.
func (mr *MockStoreMockRecorder) CreateAccountTags(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountTags", reflect.TypeOf((*MockStore)(nil).CreateAccountTags), ctx, arg)
}

// CreateAccountTx mocks base method.
func (m *MockStore) CreateAccountTx(ctx context.Context, args domain.CreateAccountParams) (repository.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountTx", ctx, args)
	ret0, _ := ret[0].(repository.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountTx indicates an expected call of CreateAccountTx.
func (mr *MockStoreMockRecorder) CreateAccountTx(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountTx", reflect.TypeOf((*MockStore)(nil).CreateAccountTx), ctx, args)
}

// CreateAccounts mocks base method.
func (m *MockStore) CreateAccounts(ctx context.Context, arg repository.CreateAccountsParams) (repository.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccounts", ctx, arg)
	ret0, _ := ret[0].(repository.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccounts indicates an expected call of CreateAccounts.
func (mr *MockStoreMockRecorder) CreateAccounts(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccounts", reflect.TypeOf((*MockStore)(nil).CreateAccounts), ctx, arg)
}

// CreateBookmarks mocks base method.
func (m *MockStore) CreateBookmarks(ctx context.Context, arg repository.CreateBookmarksParams) (repository.Bookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookmarks", ctx, arg)
	ret0, _ := ret[0].(repository.Bookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBookmarks indicates an expected call of CreateBookmarks.
func (mr *MockStoreMockRecorder) CreateBookmarks(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookmarks", reflect.TypeOf((*MockStore)(nil).CreateBookmarks), ctx, arg)
}

// CreateFollows mocks base method.
func (m *MockStore) CreateFollows(ctx context.Context, arg repository.CreateFollowsParams) (repository.Follow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFollows", ctx, arg)
	ret0, _ := ret[0].(repository.Follow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFollows indicates an expected call of CreateFollows.
func (mr *MockStoreMockRecorder) CreateFollows(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFollows", reflect.TypeOf((*MockStore)(nil).CreateFollows), ctx, arg)
}

// CreateHackathonStatusTags mocks base method.
func (m *MockStore) CreateHackathonStatusTags(ctx context.Context, arg repository.CreateHackathonStatusTagsParams) (repository.HackathonStatusTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHackathonStatusTags", ctx, arg)
	ret0, _ := ret[0].(repository.HackathonStatusTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHackathonStatusTags indicates an expected call of CreateHackathonStatusTags.
func (mr *MockStoreMockRecorder) CreateHackathonStatusTags(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHackathonStatusTags", reflect.TypeOf((*MockStore)(nil).CreateHackathonStatusTags), ctx, arg)
}

// CreateHackathonTx mocks base method.
func (m *MockStore) CreateHackathonTx(ctx context.Context, args domain.CreateHackathonParams) (repository.Hackathon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHackathonTx", ctx, args)
	ret0, _ := ret[0].(repository.Hackathon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHackathonTx indicates an expected call of CreateHackathonTx.
func (mr *MockStoreMockRecorder) CreateHackathonTx(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHackathonTx", reflect.TypeOf((*MockStore)(nil).CreateHackathonTx), ctx, args)
}

// CreateHackathons mocks base method.
func (m *MockStore) CreateHackathons(ctx context.Context, arg repository.CreateHackathonsParams) (repository.Hackathon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHackathons", ctx, arg)
	ret0, _ := ret[0].(repository.Hackathon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHackathons indicates an expected call of CreateHackathons.
func (mr *MockStoreMockRecorder) CreateHackathons(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHackathons", reflect.TypeOf((*MockStore)(nil).CreateHackathons), ctx, arg)
}

// CreatePastWorkFrameworks mocks base method.
func (m *MockStore) CreatePastWorkFrameworks(ctx context.Context, arg repository.CreatePastWorkFrameworksParams) (repository.PastWorkFramework, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePastWorkFrameworks", ctx, arg)
	ret0, _ := ret[0].(repository.PastWorkFramework)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePastWorkFrameworks indicates an expected call of CreatePastWorkFrameworks.
func (mr *MockStoreMockRecorder) CreatePastWorkFrameworks(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePastWorkFrameworks", reflect.TypeOf((*MockStore)(nil).CreatePastWorkFrameworks), ctx, arg)
}

// CreatePastWorkTags mocks base method.
func (m *MockStore) CreatePastWorkTags(ctx context.Context, arg repository.CreatePastWorkTagsParams) (repository.PastWorkTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePastWorkTags", ctx, arg)
	ret0, _ := ret[0].(repository.PastWorkTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePastWorkTags indicates an expected call of CreatePastWorkTags.
func (mr *MockStoreMockRecorder) CreatePastWorkTags(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePastWorkTags", reflect.TypeOf((*MockStore)(nil).CreatePastWorkTags), ctx, arg)
}

// CreatePastWorkTx mocks base method.
func (m *MockStore) CreatePastWorkTx(ctx context.Context, arg domain.CreatePastWorkParams) (repository.PastWork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePastWorkTx", ctx, arg)
	ret0, _ := ret[0].(repository.PastWork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePastWorkTx indicates an expected call of CreatePastWorkTx.
func (mr *MockStoreMockRecorder) CreatePastWorkTx(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePastWorkTx", reflect.TypeOf((*MockStore)(nil).CreatePastWorkTx), ctx, arg)
}

// CreatePastWorks mocks base method.
func (m *MockStore) CreatePastWorks(ctx context.Context, arg repository.CreatePastWorksParams) (repository.PastWork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePastWorks", ctx, arg)
	ret0, _ := ret[0].(repository.PastWork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePastWorks indicates an expected call of CreatePastWorks.
func (mr *MockStoreMockRecorder) CreatePastWorks(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePastWorks", reflect.TypeOf((*MockStore)(nil).CreatePastWorks), ctx, arg)
}

// CreateRateEntityTx mocks base method.
func (m *MockStore) CreateRateEntityTx(ctx context.Context, arg repository.CreateRateEntriesParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRateEntityTx", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRateEntityTx indicates an expected call of CreateRateEntityTx.
func (mr *MockStoreMockRecorder) CreateRateEntityTx(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRateEntityTx", reflect.TypeOf((*MockStore)(nil).CreateRateEntityTx), ctx, arg)
}

// CreateRateEntries mocks base method.
func (m *MockStore) CreateRateEntries(ctx context.Context, arg repository.CreateRateEntriesParams) (repository.RateEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRateEntries", ctx, arg)
	ret0, _ := ret[0].(repository.RateEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRateEntries indicates an expected call of CreateRateEntries.
func (mr *MockStoreMockRecorder) CreateRateEntries(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRateEntries", reflect.TypeOf((*MockStore)(nil).CreateRateEntries), ctx, arg)
}

// CreateRoomTx mocks base method.
func (m *MockStore) CreateRoomTx(ctx context.Context, args domain.CreateRoomParam) (repository.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoomTx", ctx, args)
	ret0, _ := ret[0].(repository.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoomTx indicates an expected call of CreateRoomTx.
func (mr *MockStoreMockRecorder) CreateRoomTx(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoomTx", reflect.TypeOf((*MockStore)(nil).CreateRoomTx), ctx, args)
}

// CreateRooms mocks base method.
func (m *MockStore) CreateRooms(ctx context.Context, arg repository.CreateRoomsParams) (repository.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRooms", ctx, arg)
	ret0, _ := ret[0].(repository.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRooms indicates an expected call of CreateRooms.
func (mr *MockStoreMockRecorder) CreateRooms(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRooms", reflect.TypeOf((*MockStore)(nil).CreateRooms), ctx, arg)
}

// CreateRoomsAccounts mocks base method.
func (m *MockStore) CreateRoomsAccounts(ctx context.Context, arg repository.CreateRoomsAccountsParams) (repository.RoomsAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoomsAccounts", ctx, arg)
	ret0, _ := ret[0].(repository.RoomsAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoomsAccounts indicates an expected call of CreateRoomsAccounts.
func (mr *MockStoreMockRecorder) CreateRoomsAccounts(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoomsAccounts", reflect.TypeOf((*MockStore)(nil).CreateRoomsAccounts), ctx, arg)
}

// DeleteAccountFrameworkByUserID mocks base method.
func (m *MockStore) DeleteAccountFrameworkByUserID(ctx context.Context, accountID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountFrameworkByUserID", ctx, accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountFrameworkByUserID indicates an expected call of DeleteAccountFrameworkByUserID.
func (mr *MockStoreMockRecorder) DeleteAccountFrameworkByUserID(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountFrameworkByUserID", reflect.TypeOf((*MockStore)(nil).DeleteAccountFrameworkByUserID), ctx, accountID)
}

// DeleteAccountPastWorksByOpus mocks base method.
func (m *MockStore) DeleteAccountPastWorksByOpus(ctx context.Context, opus int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountPastWorksByOpus", ctx, opus)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountPastWorksByOpus indicates an expected call of DeleteAccountPastWorksByOpus.
func (mr *MockStoreMockRecorder) DeleteAccountPastWorksByOpus(ctx, opus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountPastWorksByOpus", reflect.TypeOf((*MockStore)(nil).DeleteAccountPastWorksByOpus), ctx, opus)
}

// DeleteAccountTagsByUserID mocks base method.
func (m *MockStore) DeleteAccountTagsByUserID(ctx context.Context, accountID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountTagsByUserID", ctx, accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountTagsByUserID indicates an expected call of DeleteAccountTagsByUserID.
func (mr *MockStoreMockRecorder) DeleteAccountTagsByUserID(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountTagsByUserID", reflect.TypeOf((*MockStore)(nil).DeleteAccountTagsByUserID), ctx, accountID)
}

// DeleteAccounts mocks base method.
func (m *MockStore) DeleteAccounts(ctx context.Context, accountID string) (repository.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccounts", ctx, accountID)
	ret0, _ := ret[0].(repository.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccounts indicates an expected call of DeleteAccounts.
func (mr *MockStoreMockRecorder) DeleteAccounts(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccounts", reflect.TypeOf((*MockStore)(nil).DeleteAccounts), ctx, accountID)
}

// DeleteBookmarksByID mocks base method.
func (m *MockStore) DeleteBookmarksByID(ctx context.Context, arg repository.DeleteBookmarksByIDParams) (repository.Bookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookmarksByID", ctx, arg)
	ret0, _ := ret[0].(repository.Bookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBookmarksByID indicates an expected call of DeleteBookmarksByID.
func (mr *MockStoreMockRecorder) DeleteBookmarksByID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookmarksByID", reflect.TypeOf((*MockStore)(nil).DeleteBookmarksByID), ctx, arg)
}

// DeleteFollows mocks base method.
func (m *MockStore) DeleteFollows(ctx context.Context, arg repository.DeleteFollowsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFollows", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFollows indicates an expected call of DeleteFollows.
func (mr *MockStoreMockRecorder) DeleteFollows(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFollows", reflect.TypeOf((*MockStore)(nil).DeleteFollows), ctx, arg)
}

// DeleteFrameworksByID mocks base method.
func (m *MockStore) DeleteFrameworksByID(ctx context.Context, frameworkID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFrameworksByID", ctx, frameworkID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFrameworksByID indicates an expected call of DeleteFrameworksByID.
func (mr *MockStoreMockRecorder) DeleteFrameworksByID(ctx, frameworkID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFrameworksByID", reflect.TypeOf((*MockStore)(nil).DeleteFrameworksByID), ctx, frameworkID)
}

// DeleteHackathonByID mocks base method.
func (m *MockStore) DeleteHackathonByID(ctx context.Context, hackathonID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHackathonByID", ctx, hackathonID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHackathonByID indicates an expected call of DeleteHackathonByID.
func (mr *MockStoreMockRecorder) DeleteHackathonByID(ctx, hackathonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHackathonByID", reflect.TypeOf((*MockStore)(nil).DeleteHackathonByID), ctx, hackathonID)
}

// DeleteHackathonStatusTagsByID mocks base method.
func (m *MockStore) DeleteHackathonStatusTagsByID(ctx context.Context, hackathonID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHackathonStatusTagsByID", ctx, hackathonID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHackathonStatusTagsByID indicates an expected call of DeleteHackathonStatusTagsByID.
func (mr *MockStoreMockRecorder) DeleteHackathonStatusTagsByID(ctx, hackathonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHackathonStatusTagsByID", reflect.TypeOf((*MockStore)(nil).DeleteHackathonStatusTagsByID), ctx, hackathonID)
}

// DeletePastWorkFrameworksByOpus mocks base method.
func (m *MockStore) DeletePastWorkFrameworksByOpus(ctx context.Context, opus int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePastWorkFrameworksByOpus", ctx, opus)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePastWorkFrameworksByOpus indicates an expected call of DeletePastWorkFrameworksByOpus.
func (mr *MockStoreMockRecorder) DeletePastWorkFrameworksByOpus(ctx, opus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePastWorkFrameworksByOpus", reflect.TypeOf((*MockStore)(nil).DeletePastWorkFrameworksByOpus), ctx, opus)
}

// DeletePastWorkTagsByOpus mocks base method.
func (m *MockStore) DeletePastWorkTagsByOpus(ctx context.Context, opus int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePastWorkTagsByOpus", ctx, opus)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePastWorkTagsByOpus indicates an expected call of DeletePastWorkTagsByOpus.
func (mr *MockStoreMockRecorder) DeletePastWorkTagsByOpus(ctx, opus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePastWorkTagsByOpus", reflect.TypeOf((*MockStore)(nil).DeletePastWorkTagsByOpus), ctx, opus)
}

// DeleteRoomTx mocks base method.
func (m *MockStore) DeleteRoomTx(ctx context.Context, args domain.DeleteRoomParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoomTx", ctx, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoomTx indicates an expected call of DeleteRoomTx.
func (mr *MockStoreMockRecorder) DeleteRoomTx(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoomTx", reflect.TypeOf((*MockStore)(nil).DeleteRoomTx), ctx, args)
}

// DeleteRoomsAccountsByID mocks base method.
func (m *MockStore) DeleteRoomsAccountsByID(ctx context.Context, arg repository.DeleteRoomsAccountsByIDParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoomsAccountsByID", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoomsAccountsByID indicates an expected call of DeleteRoomsAccountsByID.
func (mr *MockStoreMockRecorder) DeleteRoomsAccountsByID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoomsAccountsByID", reflect.TypeOf((*MockStore)(nil).DeleteRoomsAccountsByID), ctx, arg)
}

// DeleteRoomsByID mocks base method.
func (m *MockStore) DeleteRoomsByID(ctx context.Context, roomID uuid.UUID) (repository.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoomsByID", ctx, roomID)
	ret0, _ := ret[0].(repository.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoomsByID indicates an expected call of DeleteRoomsByID.
func (mr *MockStoreMockRecorder) DeleteRoomsByID(ctx, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoomsByID", reflect.TypeOf((*MockStore)(nil).DeleteRoomsByID), ctx, roomID)
}

// DeleteStatusTagsByStatusID mocks base method.
func (m *MockStore) DeleteStatusTagsByStatusID(ctx context.Context, statusID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStatusTagsByStatusID", ctx, statusID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStatusTagsByStatusID indicates an expected call of DeleteStatusTagsByStatusID.
func (mr *MockStoreMockRecorder) DeleteStatusTagsByStatusID(ctx, statusID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatusTagsByStatusID", reflect.TypeOf((*MockStore)(nil).DeleteStatusTagsByStatusID), ctx, statusID)
}

// DeleteTechTagsByID mocks base method.
func (m *MockStore) DeleteTechTagsByID(ctx context.Context, techTagID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTechTagsByID", ctx, techTagID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTechTagsByID indicates an expected call of DeleteTechTagsByID.
func (mr *MockStoreMockRecorder) DeleteTechTagsByID(ctx, techTagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTechTagsByID", reflect.TypeOf((*MockStore)(nil).DeleteTechTagsByID), ctx, techTagID)
}

// GetAccountsByEmail mocks base method.
func (m *MockStore) GetAccountsByEmail(ctx context.Context, email string) (repository.GetAccountsByEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsByEmail", ctx, email)
	ret0, _ := ret[0].(repository.GetAccountsByEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsByEmail indicates an expected call of GetAccountsByEmail.
func (mr *MockStoreMockRecorder) GetAccountsByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsByEmail", reflect.TypeOf((*MockStore)(nil).GetAccountsByEmail), ctx, email)
}

// GetAccountsByID mocks base method.
func (m *MockStore) GetAccountsByID(ctx context.Context, accountID string) (repository.GetAccountsByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsByID", ctx, accountID)
	ret0, _ := ret[0].(repository.GetAccountsByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsByID indicates an expected call of GetAccountsByID.
func (mr *MockStoreMockRecorder) GetAccountsByID(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsByID", reflect.TypeOf((*MockStore)(nil).GetAccountsByID), ctx, accountID)
}

// GetFrameworksByID mocks base method.
func (m *MockStore) GetFrameworksByID(ctx context.Context, frameworkID int32) (repository.Framework, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrameworksByID", ctx, frameworkID)
	ret0, _ := ret[0].(repository.Framework)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFrameworksByID indicates an expected call of GetFrameworksByID.
func (mr *MockStoreMockRecorder) GetFrameworksByID(ctx, frameworkID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrameworksByID", reflect.TypeOf((*MockStore)(nil).GetFrameworksByID), ctx, frameworkID)
}

// GetHackathonByID mocks base method.
func (m *MockStore) GetHackathonByID(ctx context.Context, hackathonID int32) (repository.Hackathon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHackathonByID", ctx, hackathonID)
	ret0, _ := ret[0].(repository.Hackathon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHackathonByID indicates an expected call of GetHackathonByID.
func (mr *MockStoreMockRecorder) GetHackathonByID(ctx, hackathonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHackathonByID", reflect.TypeOf((*MockStore)(nil).GetHackathonByID), ctx, hackathonID)
}

// GetLocatesByID mocks base method.
func (m *MockStore) GetLocatesByID(ctx context.Context, locateID int32) (repository.Locate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocatesByID", ctx, locateID)
	ret0, _ := ret[0].(repository.Locate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocatesByID indicates an expected call of GetLocatesByID.
func (mr *MockStoreMockRecorder) GetLocatesByID(ctx, locateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocatesByID", reflect.TypeOf((*MockStore)(nil).GetLocatesByID), ctx, locateID)
}

// GetPastWorksByOpus mocks base method.
func (m *MockStore) GetPastWorksByOpus(ctx context.Context, opus int32) (repository.PastWork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPastWorksByOpus", ctx, opus)
	ret0, _ := ret[0].(repository.PastWork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPastWorksByOpus indicates an expected call of GetPastWorksByOpus.
func (mr *MockStoreMockRecorder) GetPastWorksByOpus(ctx, opus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPastWorksByOpus", reflect.TypeOf((*MockStore)(nil).GetPastWorksByOpus), ctx, opus)
}

// GetRoomsAccountsByID mocks base method.
func (m *MockStore) GetRoomsAccountsByID(ctx context.Context, roomID uuid.UUID) ([]repository.GetRoomsAccountsByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomsAccountsByID", ctx, roomID)
	ret0, _ := ret[0].([]repository.GetRoomsAccountsByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomsAccountsByID indicates an expected call of GetRoomsAccountsByID.
func (mr *MockStoreMockRecorder) GetRoomsAccountsByID(ctx, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomsAccountsByID", reflect.TypeOf((*MockStore)(nil).GetRoomsAccountsByID), ctx, roomID)
}

// GetRoomsByID mocks base method.
func (m *MockStore) GetRoomsByID(ctx context.Context, roomID uuid.UUID) (repository.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomsByID", ctx, roomID)
	ret0, _ := ret[0].(repository.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomsByID indicates an expected call of GetRoomsByID.
func (mr *MockStoreMockRecorder) GetRoomsByID(ctx, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomsByID", reflect.TypeOf((*MockStore)(nil).GetRoomsByID), ctx, roomID)
}

// GetStatusTagsByHackathonID mocks base method.
func (m *MockStore) GetStatusTagsByHackathonID(ctx context.Context, hackathonID int32) ([]repository.StatusTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusTagsByHackathonID", ctx, hackathonID)
	ret0, _ := ret[0].([]repository.StatusTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatusTagsByHackathonID indicates an expected call of GetStatusTagsByHackathonID.
func (mr *MockStoreMockRecorder) GetStatusTagsByHackathonID(ctx, hackathonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusTagsByHackathonID", reflect.TypeOf((*MockStore)(nil).GetStatusTagsByHackathonID), ctx, hackathonID)
}

// GetStatusTagsByStatusID mocks base method.
func (m *MockStore) GetStatusTagsByStatusID(ctx context.Context, statusID int32) (repository.StatusTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusTagsByStatusID", ctx, statusID)
	ret0, _ := ret[0].(repository.StatusTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatusTagsByStatusID indicates an expected call of GetStatusTagsByStatusID.
func (mr *MockStoreMockRecorder) GetStatusTagsByStatusID(ctx, statusID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusTagsByStatusID", reflect.TypeOf((*MockStore)(nil).GetStatusTagsByStatusID), ctx, statusID)
}

// GetTechTagsByID mocks base method.
func (m *MockStore) GetTechTagsByID(ctx context.Context, techTagID int32) (repository.TechTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTechTagsByID", ctx, techTagID)
	ret0, _ := ret[0].(repository.TechTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTechTagsByID indicates an expected call of GetTechTagsByID.
func (mr *MockStoreMockRecorder) GetTechTagsByID(ctx, techTagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTechTagsByID", reflect.TypeOf((*MockStore)(nil).GetTechTagsByID), ctx, techTagID)
}

// InitChatRoom mocks base method.
func (m *MockStore) InitChatRoom(ctx context.Context, roomID string) (*firestore.WriteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitChatRoom", ctx, roomID)
	ret0, _ := ret[0].(*firestore.WriteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitChatRoom indicates an expected call of InitChatRoom.
func (mr *MockStoreMockRecorder) InitChatRoom(ctx, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitChatRoom", reflect.TypeOf((*MockStore)(nil).InitChatRoom), ctx, roomID)
}

// ListAccountFrameworksByUserID mocks base method.
func (m *MockStore) ListAccountFrameworksByUserID(ctx context.Context, accountID string) ([]repository.ListAccountFrameworksByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountFrameworksByUserID", ctx, accountID)
	ret0, _ := ret[0].([]repository.ListAccountFrameworksByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountFrameworksByUserID indicates an expected call of ListAccountFrameworksByUserID.
func (mr *MockStoreMockRecorder) ListAccountFrameworksByUserID(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountFrameworksByUserID", reflect.TypeOf((*MockStore)(nil).ListAccountFrameworksByUserID), ctx, accountID)
}

// ListAccountPastWorksByOpus mocks base method.
func (m *MockStore) ListAccountPastWorksByOpus(ctx context.Context, opus int32) ([]repository.AccountPastWork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountPastWorksByOpus", ctx, opus)
	ret0, _ := ret[0].([]repository.AccountPastWork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountPastWorksByOpus indicates an expected call of ListAccountPastWorksByOpus.
func (mr *MockStoreMockRecorder) ListAccountPastWorksByOpus(ctx, opus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountPastWorksByOpus", reflect.TypeOf((*MockStore)(nil).ListAccountPastWorksByOpus), ctx, opus)
}

// ListAccountTagsByUserID mocks base method.
func (m *MockStore) ListAccountTagsByUserID(ctx context.Context, accountID string) ([]repository.ListAccountTagsByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountTagsByUserID", ctx, accountID)
	ret0, _ := ret[0].([]repository.ListAccountTagsByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountTagsByUserID indicates an expected call of ListAccountTagsByUserID.
func (mr *MockStoreMockRecorder) ListAccountTagsByUserID(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountTagsByUserID", reflect.TypeOf((*MockStore)(nil).ListAccountTagsByUserID), ctx, accountID)
}

// ListAccounts mocks base method.
func (m *MockStore) ListAccounts(ctx context.Context, arg repository.ListAccountsParams) ([]repository.ListAccountsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", ctx, arg)
	ret0, _ := ret[0].([]repository.ListAccountsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockStoreMockRecorder) ListAccounts(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockStore)(nil).ListAccounts), ctx, arg)
}

// ListBookmarksByID mocks base method.
func (m *MockStore) ListBookmarksByID(ctx context.Context, accountID string) ([]repository.Bookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBookmarksByID", ctx, accountID)
	ret0, _ := ret[0].([]repository.Bookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBookmarksByID indicates an expected call of ListBookmarksByID.
func (mr *MockStoreMockRecorder) ListBookmarksByID(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBookmarksByID", reflect.TypeOf((*MockStore)(nil).ListBookmarksByID), ctx, accountID)
}

// ListFollowsByToUserID mocks base method.
func (m *MockStore) ListFollowsByToUserID(ctx context.Context, toAccountID string) ([]repository.Follow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFollowsByToUserID", ctx, toAccountID)
	ret0, _ := ret[0].([]repository.Follow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFollowsByToUserID indicates an expected call of ListFollowsByToUserID.
func (mr *MockStoreMockRecorder) ListFollowsByToUserID(ctx, toAccountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFollowsByToUserID", reflect.TypeOf((*MockStore)(nil).ListFollowsByToUserID), ctx, toAccountID)
}

// ListFrameworks mocks base method.
func (m *MockStore) ListFrameworks(ctx context.Context) ([]repository.Framework, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFrameworks", ctx)
	ret0, _ := ret[0].([]repository.Framework)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFrameworks indicates an expected call of ListFrameworks.
func (mr *MockStoreMockRecorder) ListFrameworks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFrameworks", reflect.TypeOf((*MockStore)(nil).ListFrameworks), ctx)
}

// ListHackathonStatusTagsByID mocks base method.
func (m *MockStore) ListHackathonStatusTagsByID(ctx context.Context, hackathonID int32) ([]repository.HackathonStatusTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHackathonStatusTagsByID", ctx, hackathonID)
	ret0, _ := ret[0].([]repository.HackathonStatusTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHackathonStatusTagsByID indicates an expected call of ListHackathonStatusTagsByID.
func (mr *MockStoreMockRecorder) ListHackathonStatusTagsByID(ctx, hackathonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHackathonStatusTagsByID", reflect.TypeOf((*MockStore)(nil).ListHackathonStatusTagsByID), ctx, hackathonID)
}

// ListHackathons mocks base method.
func (m *MockStore) ListHackathons(ctx context.Context, arg repository.ListHackathonsParams) ([]repository.Hackathon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHackathons", ctx, arg)
	ret0, _ := ret[0].([]repository.Hackathon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHackathons indicates an expected call of ListHackathons.
func (mr *MockStoreMockRecorder) ListHackathons(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHackathons", reflect.TypeOf((*MockStore)(nil).ListHackathons), ctx, arg)
}

// ListLocates mocks base method.
func (m *MockStore) ListLocates(ctx context.Context) ([]repository.Locate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLocates", ctx)
	ret0, _ := ret[0].([]repository.Locate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLocates indicates an expected call of ListLocates.
func (mr *MockStoreMockRecorder) ListLocates(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocates", reflect.TypeOf((*MockStore)(nil).ListLocates), ctx)
}

// ListPastWorkFrameworksByOpus mocks base method.
func (m *MockStore) ListPastWorkFrameworksByOpus(ctx context.Context, opus int32) ([]repository.PastWorkFramework, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPastWorkFrameworksByOpus", ctx, opus)
	ret0, _ := ret[0].([]repository.PastWorkFramework)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPastWorkFrameworksByOpus indicates an expected call of ListPastWorkFrameworksByOpus.
func (mr *MockStoreMockRecorder) ListPastWorkFrameworksByOpus(ctx, opus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPastWorkFrameworksByOpus", reflect.TypeOf((*MockStore)(nil).ListPastWorkFrameworksByOpus), ctx, opus)
}

// ListPastWorkTagsByOpus mocks base method.
func (m *MockStore) ListPastWorkTagsByOpus(ctx context.Context, opus int32) ([]repository.PastWorkTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPastWorkTagsByOpus", ctx, opus)
	ret0, _ := ret[0].([]repository.PastWorkTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPastWorkTagsByOpus indicates an expected call of ListPastWorkTagsByOpus.
func (mr *MockStoreMockRecorder) ListPastWorkTagsByOpus(ctx, opus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPastWorkTagsByOpus", reflect.TypeOf((*MockStore)(nil).ListPastWorkTagsByOpus), ctx, opus)
}

// ListPastWorks mocks base method.
func (m *MockStore) ListPastWorks(ctx context.Context, arg repository.ListPastWorksParams) ([]repository.ListPastWorksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPastWorks", ctx, arg)
	ret0, _ := ret[0].([]repository.ListPastWorksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPastWorks indicates an expected call of ListPastWorks.
func (mr *MockStoreMockRecorder) ListPastWorks(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPastWorks", reflect.TypeOf((*MockStore)(nil).ListPastWorks), ctx, arg)
}

// ListRateEntries mocks base method.
func (m *MockStore) ListRateEntries(ctx context.Context, arg repository.ListRateEntriesParams) ([]repository.RateEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRateEntries", ctx, arg)
	ret0, _ := ret[0].([]repository.RateEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRateEntries indicates an expected call of ListRateEntries.
func (mr *MockStoreMockRecorder) ListRateEntries(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRateEntries", reflect.TypeOf((*MockStore)(nil).ListRateEntries), ctx, arg)
}

// ListRooms mocks base method.
func (m *MockStore) ListRooms(ctx context.Context, arg repository.ListRoomsParams) ([]repository.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRooms", ctx, arg)
	ret0, _ := ret[0].([]repository.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRooms indicates an expected call of ListRooms.
func (mr *MockStoreMockRecorder) ListRooms(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRooms", reflect.TypeOf((*MockStore)(nil).ListRooms), ctx, arg)
}

// ListStatusTags mocks base method.
func (m *MockStore) ListStatusTags(ctx context.Context) ([]repository.StatusTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStatusTags", ctx)
	ret0, _ := ret[0].([]repository.StatusTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStatusTags indicates an expected call of ListStatusTags.
func (mr *MockStoreMockRecorder) ListStatusTags(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStatusTags", reflect.TypeOf((*MockStore)(nil).ListStatusTags), ctx)
}

// ListTechTags mocks base method.
func (m *MockStore) ListTechTags(ctx context.Context) ([]repository.TechTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTechTags", ctx)
	ret0, _ := ret[0].([]repository.TechTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTechTags indicates an expected call of ListTechTags.
func (mr *MockStoreMockRecorder) ListTechTags(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTechTags", reflect.TypeOf((*MockStore)(nil).ListTechTags), ctx)
}

// ReadDocsByRoomID mocks base method.
func (m *MockStore) ReadDocsByRoomID(ctx context.Context, RoomID string) (map[string]domain.ChatRoomsWrite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDocsByRoomID", ctx, RoomID)
	ret0, _ := ret[0].(map[string]domain.ChatRoomsWrite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDocsByRoomID indicates an expected call of ReadDocsByRoomID.
func (mr *MockStoreMockRecorder) ReadDocsByRoomID(ctx, RoomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDocsByRoomID", reflect.TypeOf((*MockStore)(nil).ReadDocsByRoomID), ctx, RoomID)
}

// UpdateAccountTx mocks base method.
func (m *MockStore) UpdateAccountTx(ctx context.Context, args domain.UpdateAccountParam) (repository.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountTx", ctx, args)
	ret0, _ := ret[0].(repository.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountTx indicates an expected call of UpdateAccountTx.
func (mr *MockStoreMockRecorder) UpdateAccountTx(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountTx", reflect.TypeOf((*MockStore)(nil).UpdateAccountTx), ctx, args)
}

// UpdateAccounts mocks base method.
func (m *MockStore) UpdateAccounts(ctx context.Context, arg repository.UpdateAccountsParams) (repository.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccounts", ctx, arg)
	ret0, _ := ret[0].(repository.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccounts indicates an expected call of UpdateAccounts.
func (mr *MockStoreMockRecorder) UpdateAccounts(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccounts", reflect.TypeOf((*MockStore)(nil).UpdateAccounts), ctx, arg)
}

// UpdateFrameworksByID mocks base method.
func (m *MockStore) UpdateFrameworksByID(ctx context.Context, arg repository.UpdateFrameworksByIDParams) (repository.Framework, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFrameworksByID", ctx, arg)
	ret0, _ := ret[0].(repository.Framework)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFrameworksByID indicates an expected call of UpdateFrameworksByID.
func (mr *MockStoreMockRecorder) UpdateFrameworksByID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFrameworksByID", reflect.TypeOf((*MockStore)(nil).UpdateFrameworksByID), ctx, arg)
}

// UpdateRateByID mocks base method.
func (m *MockStore) UpdateRateByID(ctx context.Context, arg repository.UpdateRateByIDParams) (repository.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRateByID", ctx, arg)
	ret0, _ := ret[0].(repository.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRateByID indicates an expected call of UpdateRateByID.
func (mr *MockStoreMockRecorder) UpdateRateByID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRateByID", reflect.TypeOf((*MockStore)(nil).UpdateRateByID), ctx, arg)
}

// UpdateRoomTx mocks base method.
func (m *MockStore) UpdateRoomTx(ctx context.Context, body domain.UpdateRoomParam) (repository.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoomTx", ctx, body)
	ret0, _ := ret[0].(repository.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoomTx indicates an expected call of UpdateRoomTx.
func (mr *MockStoreMockRecorder) UpdateRoomTx(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoomTx", reflect.TypeOf((*MockStore)(nil).UpdateRoomTx), ctx, body)
}

// UpdateRoomsByID mocks base method.
func (m *MockStore) UpdateRoomsByID(ctx context.Context, arg repository.UpdateRoomsByIDParams) (repository.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoomsByID", ctx, arg)
	ret0, _ := ret[0].(repository.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoomsByID indicates an expected call of UpdateRoomsByID.
func (mr *MockStoreMockRecorder) UpdateRoomsByID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoomsByID", reflect.TypeOf((*MockStore)(nil).UpdateRoomsByID), ctx, arg)
}

// UpdateStatusTagsByStatusID mocks base method.
func (m *MockStore) UpdateStatusTagsByStatusID(ctx context.Context, status string) (repository.StatusTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusTagsByStatusID", ctx, status)
	ret0, _ := ret[0].(repository.StatusTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatusTagsByStatusID indicates an expected call of UpdateStatusTagsByStatusID.
func (mr *MockStoreMockRecorder) UpdateStatusTagsByStatusID(ctx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusTagsByStatusID", reflect.TypeOf((*MockStore)(nil).UpdateStatusTagsByStatusID), ctx, status)
}

// UpdateTechTagsByID mocks base method.
func (m *MockStore) UpdateTechTagsByID(ctx context.Context, language string) (repository.TechTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTechTagsByID", ctx, language)
	ret0, _ := ret[0].(repository.TechTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTechTagsByID indicates an expected call of UpdateTechTagsByID.
func (mr *MockStoreMockRecorder) UpdateTechTagsByID(ctx, language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTechTagsByID", reflect.TypeOf((*MockStore)(nil).UpdateTechTagsByID), ctx, language)
}

// UploadImage mocks base method.
func (m *MockStore) UploadImage(ctx context.Context, file []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImage", ctx, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadImage indicates an expected call of UploadImage.
func (mr *MockStoreMockRecorder) UploadImage(ctx, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockStore)(nil).UploadImage), ctx, file)
}

// WriteFireStore mocks base method.
func (m *MockStore) WriteFireStore(ctx context.Context, arg domain.WriteFireStoreParam) (*firestore.WriteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFireStore", ctx, arg)
	ret0, _ := ret[0].(*firestore.WriteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteFireStore indicates an expected call of WriteFireStore.
func (mr *MockStoreMockRecorder) WriteFireStore(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFireStore", reflect.TypeOf((*MockStore)(nil).WriteFireStore), ctx, arg)
}
