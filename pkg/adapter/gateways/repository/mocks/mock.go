// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/adapter/gateways/repository/transaction/store.go

// Package mock_transaction is a generated GoMock package.
package mock_transaction

import (
	context "context"
	reflect "reflect"

	firestore "cloud.google.com/go/firestore"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	repository "github.com/hackhack-Geek-vol6/backend/pkg/adapter/gateways/repository/datasource"
	domain "github.com/hackhack-Geek-vol6/backend/pkg/domain"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddAccountInRoom mocks base method.
func (m *MockStore) AddAccountInRoom(ctx context.Context, args domain.AddAccountInRoomParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccountInRoom", ctx, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAccountInRoom indicates an expected call of AddAccountInRoom.
func (mr *MockStoreMockRecorder) AddAccountInRoom(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountInRoom", reflect.TypeOf((*MockStore)(nil).AddAccountInRoom), ctx, args)
}

// CreateAccount mocks base method.
func (m *MockStore) CreateAccount(ctx context.Context, arg repository.CreateAccountParams) (repository.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, arg)
	ret0, _ := ret[0].(repository.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockStoreMockRecorder) CreateAccount(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockStore)(nil).CreateAccount), ctx, arg)
}

// CreateAccountFramework mocks base method.
func (m *MockStore) CreateAccountFramework(ctx context.Context, arg repository.CreateAccountFrameworkParams) (repository.AccountFramework, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountFramework", ctx, arg)
	ret0, _ := ret[0].(repository.AccountFramework)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountFramework indicates an expected call of CreateAccountFramework.
func (mr *MockStoreMockRecorder) CreateAccountFramework(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountFramework", reflect.TypeOf((*MockStore)(nil).CreateAccountFramework), ctx, arg)
}

// CreateAccountTags mocks base method.
func (m *MockStore) CreateAccountTags(ctx context.Context, arg repository.CreateAccountTagsParams) (repository.AccountTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountTags", ctx, arg)
	ret0, _ := ret[0].(repository.AccountTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountTags indicates an expected call of CreateAccountTags.
func (mr *MockStoreMockRecorder) CreateAccountTags(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountTags", reflect.TypeOf((*MockStore)(nil).CreateAccountTags), ctx, arg)
}

// CreateAccountTx mocks base method.
func (m *MockStore) CreateAccountTx(ctx context.Context, args domain.CreateAccountParams) (domain.AccountResponses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountTx", ctx, args)
	ret0, _ := ret[0].(domain.AccountResponses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountTx indicates an expected call of CreateAccountTx.
func (mr *MockStoreMockRecorder) CreateAccountTx(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountTx", reflect.TypeOf((*MockStore)(nil).CreateAccountTx), ctx, args)
}

// CreateBookmark mocks base method.
func (m *MockStore) CreateBookmark(ctx context.Context, arg repository.CreateBookmarkParams) (repository.Bookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookmark", ctx, arg)
	ret0, _ := ret[0].(repository.Bookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBookmark indicates an expected call of CreateBookmark.
func (mr *MockStoreMockRecorder) CreateBookmark(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookmark", reflect.TypeOf((*MockStore)(nil).CreateBookmark), ctx, arg)
}

// CreateFollow mocks base method.
func (m *MockStore) CreateFollow(ctx context.Context, arg repository.CreateFollowParams) (repository.Follow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFollow", ctx, arg)
	ret0, _ := ret[0].(repository.Follow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFollow indicates an expected call of CreateFollow.
func (mr *MockStoreMockRecorder) CreateFollow(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFollow", reflect.TypeOf((*MockStore)(nil).CreateFollow), ctx, arg)
}

// CreateHackathon mocks base method.
func (m *MockStore) CreateHackathon(ctx context.Context, arg repository.CreateHackathonParams) (repository.Hackathon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHackathon", ctx, arg)
	ret0, _ := ret[0].(repository.Hackathon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHackathon indicates an expected call of CreateHackathon.
func (mr *MockStoreMockRecorder) CreateHackathon(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHackathon", reflect.TypeOf((*MockStore)(nil).CreateHackathon), ctx, arg)
}

// CreateHackathonStatusTag mocks base method.
func (m *MockStore) CreateHackathonStatusTag(ctx context.Context, arg repository.CreateHackathonStatusTagParams) (repository.HackathonStatusTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHackathonStatusTag", ctx, arg)
	ret0, _ := ret[0].(repository.HackathonStatusTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHackathonStatusTag indicates an expected call of CreateHackathonStatusTag.
func (mr *MockStoreMockRecorder) CreateHackathonStatusTag(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHackathonStatusTag", reflect.TypeOf((*MockStore)(nil).CreateHackathonStatusTag), ctx, arg)
}

// CreateRate mocks base method.
func (m *MockStore) CreateRate(ctx context.Context, arg repository.CreateRateParams) (repository.RateEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRate", ctx, arg)
	ret0, _ := ret[0].(repository.RateEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRate indicates an expected call of CreateRate.
func (mr *MockStoreMockRecorder) CreateRate(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRate", reflect.TypeOf((*MockStore)(nil).CreateRate), ctx, arg)
}

// CreateRoom mocks base method.
func (m *MockStore) CreateRoom(ctx context.Context, arg repository.CreateRoomParams) (repository.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", ctx, arg)
	ret0, _ := ret[0].(repository.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockStoreMockRecorder) CreateRoom(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockStore)(nil).CreateRoom), ctx, arg)
}

// CreateRoomTx mocks base method.
func (m *MockStore) CreateRoomTx(ctx context.Context, args domain.CreateRoomParam) (domain.GetRoomResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoomTx", ctx, args)
	ret0, _ := ret[0].(domain.GetRoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoomTx indicates an expected call of CreateRoomTx.
func (mr *MockStoreMockRecorder) CreateRoomTx(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoomTx", reflect.TypeOf((*MockStore)(nil).CreateRoomTx), ctx, args)
}

// CreateRoomsAccounts mocks base method.
func (m *MockStore) CreateRoomsAccounts(ctx context.Context, arg repository.CreateRoomsAccountsParams) (repository.RoomsAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoomsAccounts", ctx, arg)
	ret0, _ := ret[0].(repository.RoomsAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoomsAccounts indicates an expected call of CreateRoomsAccounts.
func (mr *MockStoreMockRecorder) CreateRoomsAccounts(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoomsAccounts", reflect.TypeOf((*MockStore)(nil).CreateRoomsAccounts), ctx, arg)
}

// DeleteAccountFrameworksByUserID mocks base method.
func (m *MockStore) DeleteAccountFrameworksByUserID(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountFrameworksByUserID", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountFrameworksByUserID indicates an expected call of DeleteAccountFrameworksByUserID.
func (mr *MockStoreMockRecorder) DeleteAccountFrameworksByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountFrameworksByUserID", reflect.TypeOf((*MockStore)(nil).DeleteAccountFrameworksByUserID), ctx, userID)
}

// DeleteAccounttagsByUserID mocks base method.
func (m *MockStore) DeleteAccounttagsByUserID(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccounttagsByUserID", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccounttagsByUserID indicates an expected call of DeleteAccounttagsByUserID.
func (mr *MockStoreMockRecorder) DeleteAccounttagsByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccounttagsByUserID", reflect.TypeOf((*MockStore)(nil).DeleteAccounttagsByUserID), ctx, userID)
}

// DeleteFrameworksByID mocks base method.
func (m *MockStore) DeleteFrameworksByID(ctx context.Context, frameworkID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFrameworksByID", ctx, frameworkID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFrameworksByID indicates an expected call of DeleteFrameworksByID.
func (mr *MockStoreMockRecorder) DeleteFrameworksByID(ctx, frameworkID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFrameworksByID", reflect.TypeOf((*MockStore)(nil).DeleteFrameworksByID), ctx, frameworkID)
}

// DeleteHackathonByID mocks base method.
func (m *MockStore) DeleteHackathonByID(ctx context.Context, hackathonID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHackathonByID", ctx, hackathonID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHackathonByID indicates an expected call of DeleteHackathonByID.
func (mr *MockStoreMockRecorder) DeleteHackathonByID(ctx, hackathonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHackathonByID", reflect.TypeOf((*MockStore)(nil).DeleteHackathonByID), ctx, hackathonID)
}

// DeleteHackathonStatusTagsByHackathonID mocks base method.
func (m *MockStore) DeleteHackathonStatusTagsByHackathonID(ctx context.Context, hackathonID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHackathonStatusTagsByHackathonID", ctx, hackathonID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHackathonStatusTagsByHackathonID indicates an expected call of DeleteHackathonStatusTagsByHackathonID.
func (mr *MockStoreMockRecorder) DeleteHackathonStatusTagsByHackathonID(ctx, hackathonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHackathonStatusTagsByHackathonID", reflect.TypeOf((*MockStore)(nil).DeleteHackathonStatusTagsByHackathonID), ctx, hackathonID)
}

// DeleteRoomTx mocks base method.
func (m *MockStore) DeleteRoomTx(ctx context.Context, args domain.DeleteRoomParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoomTx", ctx, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoomTx indicates an expected call of DeleteRoomTx.
func (mr *MockStoreMockRecorder) DeleteRoomTx(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoomTx", reflect.TypeOf((*MockStore)(nil).DeleteRoomTx), ctx, args)
}

// DeleteStatusTagByStatusID mocks base method.
func (m *MockStore) DeleteStatusTagByStatusID(ctx context.Context, statusID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStatusTagByStatusID", ctx, statusID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStatusTagByStatusID indicates an expected call of DeleteStatusTagByStatusID.
func (mr *MockStoreMockRecorder) DeleteStatusTagByStatusID(ctx, statusID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatusTagByStatusID", reflect.TypeOf((*MockStore)(nil).DeleteStatusTagByStatusID), ctx, statusID)
}

// DeleteTechTagByID mocks base method.
func (m *MockStore) DeleteTechTagByID(ctx context.Context, techTagID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTechTagByID", ctx, techTagID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTechTagByID indicates an expected call of DeleteTechTagByID.
func (mr *MockStoreMockRecorder) DeleteTechTagByID(ctx, techTagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTechTagByID", reflect.TypeOf((*MockStore)(nil).DeleteTechTagByID), ctx, techTagID)
}

// GetAccountByEmail mocks base method.
func (m *MockStore) GetAccountByEmail(ctx context.Context, email string) (repository.GetAccountByEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByEmail", ctx, email)
	ret0, _ := ret[0].(repository.GetAccountByEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByEmail indicates an expected call of GetAccountByEmail.
func (mr *MockStoreMockRecorder) GetAccountByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByEmail", reflect.TypeOf((*MockStore)(nil).GetAccountByEmail), ctx, email)
}

// GetAccountByID mocks base method.
func (m *MockStore) GetAccountByID(ctx context.Context, userID string) (repository.GetAccountByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByID", ctx, userID)
	ret0, _ := ret[0].(repository.GetAccountByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByID indicates an expected call of GetAccountByID.
func (mr *MockStoreMockRecorder) GetAccountByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByID", reflect.TypeOf((*MockStore)(nil).GetAccountByID), ctx, userID)
}

// GetAccountTxByEmail mocks base method.
func (m *MockStore) GetAccountTxByEmail(ctx context.Context, email string) (domain.AccountResponses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountTxByEmail", ctx, email)
	ret0, _ := ret[0].(domain.AccountResponses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountTxByEmail indicates an expected call of GetAccountTxByEmail.
func (mr *MockStoreMockRecorder) GetAccountTxByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountTxByEmail", reflect.TypeOf((*MockStore)(nil).GetAccountTxByEmail), ctx, email)
}

// GetAccountTxByID mocks base method.
func (m *MockStore) GetAccountTxByID(ctx context.Context, ID string) (domain.AccountResponses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountTxByID", ctx, ID)
	ret0, _ := ret[0].(domain.AccountResponses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountTxByID indicates an expected call of GetAccountTxByID.
func (mr *MockStoreMockRecorder) GetAccountTxByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountTxByID", reflect.TypeOf((*MockStore)(nil).GetAccountTxByID), ctx, ID)
}

// GetFrameworksByID mocks base method.
func (m *MockStore) GetFrameworksByID(ctx context.Context, frameworkID int32) (repository.Framework, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrameworksByID", ctx, frameworkID)
	ret0, _ := ret[0].(repository.Framework)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFrameworksByID indicates an expected call of GetFrameworksByID.
func (mr *MockStoreMockRecorder) GetFrameworksByID(ctx, frameworkID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrameworksByID", reflect.TypeOf((*MockStore)(nil).GetFrameworksByID), ctx, frameworkID)
}

// GetHackathonByID mocks base method.
func (m *MockStore) GetHackathonByID(ctx context.Context, hackathonID int32) (repository.Hackathon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHackathonByID", ctx, hackathonID)
	ret0, _ := ret[0].(repository.Hackathon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHackathonByID indicates an expected call of GetHackathonByID.
func (mr *MockStoreMockRecorder) GetHackathonByID(ctx, hackathonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHackathonByID", reflect.TypeOf((*MockStore)(nil).GetHackathonByID), ctx, hackathonID)
}

// GetHackathonStatusTagsByHackathonID mocks base method.
func (m *MockStore) GetHackathonStatusTagsByHackathonID(ctx context.Context, hackathonID int32) ([]repository.HackathonStatusTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHackathonStatusTagsByHackathonID", ctx, hackathonID)
	ret0, _ := ret[0].([]repository.HackathonStatusTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHackathonStatusTagsByHackathonID indicates an expected call of GetHackathonStatusTagsByHackathonID.
func (mr *MockStoreMockRecorder) GetHackathonStatusTagsByHackathonID(ctx, hackathonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHackathonStatusTagsByHackathonID", reflect.TypeOf((*MockStore)(nil).GetHackathonStatusTagsByHackathonID), ctx, hackathonID)
}

// GetLocateByID mocks base method.
func (m *MockStore) GetLocateByID(ctx context.Context, locateID int32) (repository.Locate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocateByID", ctx, locateID)
	ret0, _ := ret[0].(repository.Locate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocateByID indicates an expected call of GetLocateByID.
func (mr *MockStoreMockRecorder) GetLocateByID(ctx, locateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocateByID", reflect.TypeOf((*MockStore)(nil).GetLocateByID), ctx, locateID)
}

// GetRoomTx mocks base method.
func (m *MockStore) GetRoomTx(ctx context.Context, id uuid.UUID) (domain.GetRoomResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomTx", ctx, id)
	ret0, _ := ret[0].(domain.GetRoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomTx indicates an expected call of GetRoomTx.
func (mr *MockStoreMockRecorder) GetRoomTx(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomTx", reflect.TypeOf((*MockStore)(nil).GetRoomTx), ctx, id)
}

// GetRoomsAccountsByRoomID mocks base method.
func (m *MockStore) GetRoomsAccountsByRoomID(ctx context.Context, roomID uuid.UUID) ([]repository.GetRoomsAccountsByRoomIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomsAccountsByRoomID", ctx, roomID)
	ret0, _ := ret[0].([]repository.GetRoomsAccountsByRoomIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomsAccountsByRoomID indicates an expected call of GetRoomsAccountsByRoomID.
func (mr *MockStoreMockRecorder) GetRoomsAccountsByRoomID(ctx, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomsAccountsByRoomID", reflect.TypeOf((*MockStore)(nil).GetRoomsAccountsByRoomID), ctx, roomID)
}

// GetRoomsByID mocks base method.
func (m *MockStore) GetRoomsByID(ctx context.Context, roomID uuid.UUID) (repository.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomsByID", ctx, roomID)
	ret0, _ := ret[0].(repository.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomsByID indicates an expected call of GetRoomsByID.
func (mr *MockStoreMockRecorder) GetRoomsByID(ctx, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomsByID", reflect.TypeOf((*MockStore)(nil).GetRoomsByID), ctx, roomID)
}

// GetStatusTagByStatusID mocks base method.
func (m *MockStore) GetStatusTagByStatusID(ctx context.Context, statusID int32) (repository.StatusTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusTagByStatusID", ctx, statusID)
	ret0, _ := ret[0].(repository.StatusTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatusTagByStatusID indicates an expected call of GetStatusTagByStatusID.
func (mr *MockStoreMockRecorder) GetStatusTagByStatusID(ctx, statusID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusTagByStatusID", reflect.TypeOf((*MockStore)(nil).GetStatusTagByStatusID), ctx, statusID)
}

// GetStatusTagsByHackathonID mocks base method.
func (m *MockStore) GetStatusTagsByHackathonID(ctx context.Context, hackathonID int32) ([]repository.StatusTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusTagsByHackathonID", ctx, hackathonID)
	ret0, _ := ret[0].([]repository.StatusTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatusTagsByHackathonID indicates an expected call of GetStatusTagsByHackathonID.
func (mr *MockStoreMockRecorder) GetStatusTagsByHackathonID(ctx, hackathonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusTagsByHackathonID", reflect.TypeOf((*MockStore)(nil).GetStatusTagsByHackathonID), ctx, hackathonID)
}

// GetTechTagByID mocks base method.
func (m *MockStore) GetTechTagByID(ctx context.Context, techTagID int32) (repository.TechTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTechTagByID", ctx, techTagID)
	ret0, _ := ret[0].(repository.TechTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTechTagByID indicates an expected call of GetTechTagByID.
func (mr *MockStoreMockRecorder) GetTechTagByID(ctx, techTagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTechTagByID", reflect.TypeOf((*MockStore)(nil).GetTechTagByID), ctx, techTagID)
}

// InitChatRoom mocks base method.
func (m *MockStore) InitChatRoom(ctx context.Context, roomID string) (*firestore.WriteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitChatRoom", ctx, roomID)
	ret0, _ := ret[0].(*firestore.WriteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitChatRoom indicates an expected call of InitChatRoom.
func (mr *MockStoreMockRecorder) InitChatRoom(ctx, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitChatRoom", reflect.TypeOf((*MockStore)(nil).InitChatRoom), ctx, roomID)
}

// ListAccountFrameworksByUserID mocks base method.
func (m *MockStore) ListAccountFrameworksByUserID(ctx context.Context, userID string) ([]repository.ListAccountFrameworksByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountFrameworksByUserID", ctx, userID)
	ret0, _ := ret[0].([]repository.ListAccountFrameworksByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountFrameworksByUserID indicates an expected call of ListAccountFrameworksByUserID.
func (mr *MockStoreMockRecorder) ListAccountFrameworksByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountFrameworksByUserID", reflect.TypeOf((*MockStore)(nil).ListAccountFrameworksByUserID), ctx, userID)
}

// ListAccountTagsByUserID mocks base method.
func (m *MockStore) ListAccountTagsByUserID(ctx context.Context, userID string) ([]repository.ListAccountTagsByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountTagsByUserID", ctx, userID)
	ret0, _ := ret[0].([]repository.ListAccountTagsByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountTagsByUserID indicates an expected call of ListAccountTagsByUserID.
func (mr *MockStoreMockRecorder) ListAccountTagsByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountTagsByUserID", reflect.TypeOf((*MockStore)(nil).ListAccountTagsByUserID), ctx, userID)
}

// ListAccounts mocks base method.
func (m *MockStore) ListAccounts(ctx context.Context, arg repository.ListAccountsParams) ([]repository.ListAccountsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", ctx, arg)
	ret0, _ := ret[0].([]repository.ListAccountsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockStoreMockRecorder) ListAccounts(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockStore)(nil).ListAccounts), ctx, arg)
}

// ListBookmarkByUserID mocks base method.
func (m *MockStore) ListBookmarkByUserID(ctx context.Context, userID string) ([]repository.Bookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBookmarkByUserID", ctx, userID)
	ret0, _ := ret[0].([]repository.Bookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBookmarkByUserID indicates an expected call of ListBookmarkByUserID.
func (mr *MockStoreMockRecorder) ListBookmarkByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBookmarkByUserID", reflect.TypeOf((*MockStore)(nil).ListBookmarkByUserID), ctx, userID)
}

// ListFollowByFromUserID mocks base method.
func (m *MockStore) ListFollowByFromUserID(ctx context.Context, fromUserID string) ([]repository.Follow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFollowByFromUserID", ctx, fromUserID)
	ret0, _ := ret[0].([]repository.Follow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFollowByFromUserID indicates an expected call of ListFollowByFromUserID.
func (mr *MockStoreMockRecorder) ListFollowByFromUserID(ctx, fromUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFollowByFromUserID", reflect.TypeOf((*MockStore)(nil).ListFollowByFromUserID), ctx, fromUserID)
}

// ListFollowByToUserID mocks base method.
func (m *MockStore) ListFollowByToUserID(ctx context.Context, toUserID string) ([]repository.Follow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFollowByToUserID", ctx, toUserID)
	ret0, _ := ret[0].([]repository.Follow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFollowByToUserID indicates an expected call of ListFollowByToUserID.
func (mr *MockStoreMockRecorder) ListFollowByToUserID(ctx, toUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFollowByToUserID", reflect.TypeOf((*MockStore)(nil).ListFollowByToUserID), ctx, toUserID)
}

// ListFrameworks mocks base method.
func (m *MockStore) ListFrameworks(ctx context.Context, limit int32) ([]repository.Framework, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFrameworks", ctx, limit)
	ret0, _ := ret[0].([]repository.Framework)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFrameworks indicates an expected call of ListFrameworks.
func (mr *MockStoreMockRecorder) ListFrameworks(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFrameworks", reflect.TypeOf((*MockStore)(nil).ListFrameworks), ctx, limit)
}

// ListHackathons mocks base method.
func (m *MockStore) ListHackathons(ctx context.Context, arg repository.ListHackathonsParams) ([]repository.Hackathon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHackathons", ctx, arg)
	ret0, _ := ret[0].([]repository.Hackathon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHackathons indicates an expected call of ListHackathons.
func (mr *MockStoreMockRecorder) ListHackathons(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHackathons", reflect.TypeOf((*MockStore)(nil).ListHackathons), ctx, arg)
}

// ListLocates mocks base method.
func (m *MockStore) ListLocates(ctx context.Context) ([]repository.Locate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLocates", ctx)
	ret0, _ := ret[0].([]repository.Locate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLocates indicates an expected call of ListLocates.
func (mr *MockStoreMockRecorder) ListLocates(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocates", reflect.TypeOf((*MockStore)(nil).ListLocates), ctx)
}

// ListRate mocks base method.
func (m *MockStore) ListRate(ctx context.Context, arg repository.ListRateParams) ([]repository.RateEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRate", ctx, arg)
	ret0, _ := ret[0].([]repository.RateEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRate indicates an expected call of ListRate.
func (mr *MockStoreMockRecorder) ListRate(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRate", reflect.TypeOf((*MockStore)(nil).ListRate), ctx, arg)
}

// ListRoom mocks base method.
func (m *MockStore) ListRoom(ctx context.Context, limit int32) ([]repository.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoom", ctx, limit)
	ret0, _ := ret[0].([]repository.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoom indicates an expected call of ListRoom.
func (mr *MockStoreMockRecorder) ListRoom(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoom", reflect.TypeOf((*MockStore)(nil).ListRoom), ctx, limit)
}

// ListRoomTx mocks base method.
func (m *MockStore) ListRoomTx(ctx context.Context, query domain.ListRoomsRequest) ([]domain.ListRoomResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoomTx", ctx, query)
	ret0, _ := ret[0].([]domain.ListRoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoomTx indicates an expected call of ListRoomTx.
func (mr *MockStoreMockRecorder) ListRoomTx(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoomTx", reflect.TypeOf((*MockStore)(nil).ListRoomTx), ctx, query)
}

// ListStatusTags mocks base method.
func (m *MockStore) ListStatusTags(ctx context.Context) ([]repository.StatusTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStatusTags", ctx)
	ret0, _ := ret[0].([]repository.StatusTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStatusTags indicates an expected call of ListStatusTags.
func (mr *MockStoreMockRecorder) ListStatusTags(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStatusTags", reflect.TypeOf((*MockStore)(nil).ListStatusTags), ctx)
}

// ListTechTag mocks base method.
func (m *MockStore) ListTechTag(ctx context.Context) ([]repository.TechTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTechTag", ctx)
	ret0, _ := ret[0].([]repository.TechTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTechTag indicates an expected call of ListTechTag.
func (mr *MockStoreMockRecorder) ListTechTag(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTechTag", reflect.TypeOf((*MockStore)(nil).ListTechTag), ctx)
}

// ReadDocsByRoomID mocks base method.
func (m *MockStore) ReadDocsByRoomID(ctx context.Context, RoomID string) (map[string]domain.ChatRoomsWrite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDocsByRoomID", ctx, RoomID)
	ret0, _ := ret[0].(map[string]domain.ChatRoomsWrite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDocsByRoomID indicates an expected call of ReadDocsByRoomID.
func (mr *MockStoreMockRecorder) ReadDocsByRoomID(ctx, RoomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDocsByRoomID", reflect.TypeOf((*MockStore)(nil).ReadDocsByRoomID), ctx, RoomID)
}

// RemoveAccountInRoom mocks base method.
func (m *MockStore) RemoveAccountInRoom(ctx context.Context, arg repository.RemoveAccountInRoomParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccountInRoom", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAccountInRoom indicates an expected call of RemoveAccountInRoom.
func (mr *MockStoreMockRecorder) RemoveAccountInRoom(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccountInRoom", reflect.TypeOf((*MockStore)(nil).RemoveAccountInRoom), ctx, arg)
}

// RemoveFollow mocks base method.
func (m *MockStore) RemoveFollow(ctx context.Context, arg repository.RemoveFollowParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFollow", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFollow indicates an expected call of RemoveFollow.
func (mr *MockStoreMockRecorder) RemoveFollow(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFollow", reflect.TypeOf((*MockStore)(nil).RemoveFollow), ctx, arg)
}

// SoftDeleteAccount mocks base method.
func (m *MockStore) SoftDeleteAccount(ctx context.Context, userID string) (repository.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeleteAccount", ctx, userID)
	ret0, _ := ret[0].(repository.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoftDeleteAccount indicates an expected call of SoftDeleteAccount.
func (mr *MockStoreMockRecorder) SoftDeleteAccount(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeleteAccount", reflect.TypeOf((*MockStore)(nil).SoftDeleteAccount), ctx, userID)
}

// SoftDeleteRoomByID mocks base method.
func (m *MockStore) SoftDeleteRoomByID(ctx context.Context, roomID uuid.UUID) (repository.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeleteRoomByID", ctx, roomID)
	ret0, _ := ret[0].(repository.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoftDeleteRoomByID indicates an expected call of SoftDeleteRoomByID.
func (mr *MockStoreMockRecorder) SoftDeleteRoomByID(ctx, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeleteRoomByID", reflect.TypeOf((*MockStore)(nil).SoftDeleteRoomByID), ctx, roomID)
}

// SoftRemoveBookmark mocks base method.
func (m *MockStore) SoftRemoveBookmark(ctx context.Context, arg repository.SoftRemoveBookmarkParams) (repository.Bookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftRemoveBookmark", ctx, arg)
	ret0, _ := ret[0].(repository.Bookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoftRemoveBookmark indicates an expected call of SoftRemoveBookmark.
func (mr *MockStoreMockRecorder) SoftRemoveBookmark(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftRemoveBookmark", reflect.TypeOf((*MockStore)(nil).SoftRemoveBookmark), ctx, arg)
}

// UpdateAccount mocks base method.
func (m *MockStore) UpdateAccount(ctx context.Context, arg repository.UpdateAccountParams) (repository.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", ctx, arg)
	ret0, _ := ret[0].(repository.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockStoreMockRecorder) UpdateAccount(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockStore)(nil).UpdateAccount), ctx, arg)
}

// UpdateAccountTx mocks base method.
func (m *MockStore) UpdateAccountTx(ctx context.Context, args domain.UpdateAccountParam) (domain.AccountResponses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountTx", ctx, args)
	ret0, _ := ret[0].(domain.AccountResponses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountTx indicates an expected call of UpdateAccountTx.
func (mr *MockStoreMockRecorder) UpdateAccountTx(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountTx", reflect.TypeOf((*MockStore)(nil).UpdateAccountTx), ctx, args)
}

// UpdateFrameworksByID mocks base method.
func (m *MockStore) UpdateFrameworksByID(ctx context.Context, arg repository.UpdateFrameworksByIDParams) (repository.Framework, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFrameworksByID", ctx, arg)
	ret0, _ := ret[0].(repository.Framework)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFrameworksByID indicates an expected call of UpdateFrameworksByID.
func (mr *MockStoreMockRecorder) UpdateFrameworksByID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFrameworksByID", reflect.TypeOf((*MockStore)(nil).UpdateFrameworksByID), ctx, arg)
}

// UpdateRateByUserID mocks base method.
func (m *MockStore) UpdateRateByUserID(ctx context.Context, arg repository.UpdateRateByUserIDParams) (repository.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRateByUserID", ctx, arg)
	ret0, _ := ret[0].(repository.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRateByUserID indicates an expected call of UpdateRateByUserID.
func (mr *MockStoreMockRecorder) UpdateRateByUserID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRateByUserID", reflect.TypeOf((*MockStore)(nil).UpdateRateByUserID), ctx, arg)
}

// UpdateRoomByID mocks base method.
func (m *MockStore) UpdateRoomByID(ctx context.Context, arg repository.UpdateRoomByIDParams) (repository.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoomByID", ctx, arg)
	ret0, _ := ret[0].(repository.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoomByID indicates an expected call of UpdateRoomByID.
func (mr *MockStoreMockRecorder) UpdateRoomByID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoomByID", reflect.TypeOf((*MockStore)(nil).UpdateRoomByID), ctx, arg)
}

// UpdateRoomTx mocks base method.
func (m *MockStore) UpdateRoomTx(ctx context.Context, body domain.UpdateRoomParam) (domain.GetRoomResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoomTx", ctx, body)
	ret0, _ := ret[0].(domain.GetRoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoomTx indicates an expected call of UpdateRoomTx.
func (mr *MockStoreMockRecorder) UpdateRoomTx(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoomTx", reflect.TypeOf((*MockStore)(nil).UpdateRoomTx), ctx, body)
}

// UpdateStatusTagByStatusID mocks base method.
func (m *MockStore) UpdateStatusTagByStatusID(ctx context.Context, status string) (repository.StatusTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusTagByStatusID", ctx, status)
	ret0, _ := ret[0].(repository.StatusTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatusTagByStatusID indicates an expected call of UpdateStatusTagByStatusID.
func (mr *MockStoreMockRecorder) UpdateStatusTagByStatusID(ctx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusTagByStatusID", reflect.TypeOf((*MockStore)(nil).UpdateStatusTagByStatusID), ctx, status)
}

// UpdateTechTagByID mocks base method.
func (m *MockStore) UpdateTechTagByID(ctx context.Context, language string) (repository.TechTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTechTagByID", ctx, language)
	ret0, _ := ret[0].(repository.TechTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTechTagByID indicates an expected call of UpdateTechTagByID.
func (mr *MockStoreMockRecorder) UpdateTechTagByID(ctx, language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTechTagByID", reflect.TypeOf((*MockStore)(nil).UpdateTechTagByID), ctx, language)
}

// UploadImage mocks base method.
func (m *MockStore) UploadImage(ctx context.Context, file []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImage", ctx, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadImage indicates an expected call of UploadImage.
func (mr *MockStoreMockRecorder) UploadImage(ctx, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockStore)(nil).UploadImage), ctx, file)
}

// WriteFireStore mocks base method.
func (m *MockStore) WriteFireStore(ctx context.Context, arg domain.WriteFireStoreParam) (*firestore.WriteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFireStore", ctx, arg)
	ret0, _ := ret[0].(*firestore.WriteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteFireStore indicates an expected call of WriteFireStore.
func (mr *MockStoreMockRecorder) WriteFireStore(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFireStore", reflect.TypeOf((*MockStore)(nil).WriteFireStore), ctx, arg)
}
