// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: sqlc.account_tags.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccountTags = `-- name: CreateAccountTags :one
INSERT INTO
    account_tags (account_id, tech_tag_id)
VALUES
($1, $2) RETURNING account_id, tech_tag_id
`

type CreateAccountTagsParams struct {
	AccountID string `json:"account_id"`
	TechTagID int32  `json:"tech_tag_id"`
}

func (q *Queries) CreateAccountTags(ctx context.Context, arg CreateAccountTagsParams) (AccountTag, error) {
	row := q.db.QueryRow(ctx, createAccountTags, arg.AccountID, arg.TechTagID)
	var i AccountTag
	err := row.Scan(&i.AccountID, &i.TechTagID)
	return i, err
}

const deleteAccountTagsByUserID = `-- name: DeleteAccountTagsByUserID :exec
DELETE FROM
    account_tags
WHERE
    account_id = $1
`

func (q *Queries) DeleteAccountTagsByUserID(ctx context.Context, accountID string) error {
	_, err := q.db.Exec(ctx, deleteAccountTagsByUserID, accountID)
	return err
}

const listAccountTagsByUserID = `-- name: ListAccountTagsByUserID :many
SELECT
    tech_tags.tech_tag_id,
    tech_tags.language,
    tech_tags.icon
FROM
    account_tags
    LEFT OUTER JOIN tech_tags ON account_tags.tech_tag_id = tech_tags.tech_tag_id
WHERE
    account_tags.account_id = $1
`

type ListAccountTagsByUserIDRow struct {
	TechTagID pgtype.Int4 `json:"tech_tag_id"`
	Language  pgtype.Text `json:"language"`
	Icon      pgtype.Text `json:"icon"`
}

func (q *Queries) ListAccountTagsByUserID(ctx context.Context, accountID string) ([]ListAccountTagsByUserIDRow, error) {
	rows, err := q.db.Query(ctx, listAccountTagsByUserID, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAccountTagsByUserIDRow{}
	for rows.Next() {
		var i ListAccountTagsByUserIDRow
		if err := rows.Scan(&i.TechTagID, &i.Language, &i.Icon); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
