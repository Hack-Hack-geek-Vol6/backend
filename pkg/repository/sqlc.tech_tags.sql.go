// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: sqlc.tech_tags.sql

package repository

import (
	"context"
)

const createTechTags = `-- name: CreateTechTags :one
INSERT INTO tech_tags (language) VALUES ($1) RETURNING tech_tag_id, language, icon
`

func (q *Queries) CreateTechTags(ctx context.Context, language string) (TechTag, error) {
	row := q.db.QueryRow(ctx, createTechTags, language)
	var i TechTag
	err := row.Scan(&i.TechTagID, &i.Language, &i.Icon)
	return i, err
}

const deleteTechTagsByID = `-- name: DeleteTechTagsByID :exec
DELETE FROM tech_tags
WHERE tech_tag_id = $1
`

func (q *Queries) DeleteTechTagsByID(ctx context.Context, techTagID int32) error {
	_, err := q.db.Exec(ctx, deleteTechTagsByID, techTagID)
	return err
}

const getTechTagsByID = `-- name: GetTechTagsByID :one
SELECT tech_tag_id, language, icon
FROM tech_tags
WHERE tech_tag_id = $1
`

func (q *Queries) GetTechTagsByID(ctx context.Context, techTagID int32) (TechTag, error) {
	row := q.db.QueryRow(ctx, getTechTagsByID, techTagID)
	var i TechTag
	err := row.Scan(&i.TechTagID, &i.Language, &i.Icon)
	return i, err
}

const listTechTags = `-- name: ListTechTags :many
SELECT tech_tag_id, language, icon
FROM tech_tags
`

func (q *Queries) ListTechTags(ctx context.Context) ([]TechTag, error) {
	rows, err := q.db.Query(ctx, listTechTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TechTag{}
	for rows.Next() {
		var i TechTag
		if err := rows.Scan(&i.TechTagID, &i.Language, &i.Icon); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTechTagsByID = `-- name: UpdateTechTagsByID :one
UPDATE tech_tags
SET language = $2
WHERE tech_tag_id = $1
RETURNING tech_tag_id, language, icon
`

type UpdateTechTagsByIDParams struct {
	TechTagID int32  `json:"tech_tag_id"`
	Language  string `json:"language"`
}

func (q *Queries) UpdateTechTagsByID(ctx context.Context, arg UpdateTechTagsByIDParams) (TechTag, error) {
	row := q.db.QueryRow(ctx, updateTechTagsByID, arg.TechTagID, arg.Language)
	var i TechTag
	err := row.Scan(&i.TechTagID, &i.Language, &i.Icon)
	return i, err
}
