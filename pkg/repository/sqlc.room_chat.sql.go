// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: sqlc.room_chat.sql

package repository

import (
	"context"
)

const createChat = `-- name: CreateChat :one
INSERT INTO room_chat (
    chat_id,
    room_id,
    account_id,
    message
)VALUES(
    $1,$2,$3,$4
)RETURNING chat_id, room_id, account_id, message, created_at
`

type CreateChatParams struct {
	ChatID    string `json:"chat_id"`
	RoomID    string `json:"room_id"`
	AccountID string `json:"account_id"`
	Message   string `json:"message"`
}

func (q *Queries) CreateChat(ctx context.Context, arg CreateChatParams) (RoomChat, error) {
	row := q.db.QueryRow(ctx, createChat,
		arg.ChatID,
		arg.RoomID,
		arg.AccountID,
		arg.Message,
	)
	var i RoomChat
	err := row.Scan(
		&i.ChatID,
		&i.RoomID,
		&i.AccountID,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}

const listChat = `-- name: ListChat :many
SELECT chat_id, room_id, account_id, message, created_at FROM room_chat WHERE room_id = $1 ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type ListChatParams struct {
	RoomID string `json:"room_id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListChat(ctx context.Context, arg ListChatParams) ([]RoomChat, error) {
	rows, err := q.db.Query(ctx, listChat, arg.RoomID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RoomChat{}
	for rows.Next() {
		var i RoomChat
		if err := rows.Scan(
			&i.ChatID,
			&i.RoomID,
			&i.AccountID,
			&i.Message,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
