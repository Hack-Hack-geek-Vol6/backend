// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: sqlc.rate.sql

package repository

import (
	"context"
)

const createRateEntities = `-- name: CreateRateEntities :one
INSERT INTO rate_entities (account_id, rate)
VALUES($1, $2)
RETURNING account_id, rate, create_at
`

type CreateRateEntitiesParams struct {
	AccountID string `json:"account_id"`
	Rate      int32  `json:"rate"`
}

func (q *Queries) CreateRateEntities(ctx context.Context, arg CreateRateEntitiesParams) (RateEntity, error) {
	row := q.db.QueryRow(ctx, createRateEntities, arg.AccountID, arg.Rate)
	var i RateEntity
	err := row.Scan(&i.AccountID, &i.Rate, &i.CreateAt)
	return i, err
}

const listRateEntities = `-- name: ListRateEntities :many
SELECT account_id, rate, create_at
FROM rate_entities
WHERE account_id = $1
LIMIT $2 OFFSET $3
`

type ListRateEntitiesParams struct {
	AccountID string `json:"account_id"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

func (q *Queries) ListRateEntities(ctx context.Context, arg ListRateEntitiesParams) ([]RateEntity, error) {
	rows, err := q.db.Query(ctx, listRateEntities, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RateEntity{}
	for rows.Next() {
		var i RateEntity
		if err := rows.Scan(&i.AccountID, &i.Rate, &i.CreateAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
