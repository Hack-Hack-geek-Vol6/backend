basePath: /api/v1
definitions:
  api.AddChatRequestBody:
    properties:
      message:
        type: string
    required:
    - message
    type: object
  api.BookmarkResponse:
    properties:
      description:
        type: string
      expired:
        type: string
      hackathon_id:
        type: integer
      icon:
        type: string
      link:
        type: string
      name:
        type: string
      start_date:
        type: string
      term:
        type: integer
    type: object
  api.CreateAccountResponses:
    properties:
      explanatory_text:
        type: string
      frameworks:
        items:
          $ref: '#/definitions/db.Frameworks'
        type: array
      icon:
        type: string
      locate:
        type: string
      rate:
        type: integer
      show_locate:
        type: boolean
      show_rate:
        type: boolean
      tech_tags:
        items:
          $ref: '#/definitions/db.TechTags'
        type: array
      user_id:
        type: string
      username:
        type: string
    type: object
  api.CreateBookmarkRequestBody:
    properties:
      hackathon_id:
        type: integer
      user_id:
        type: string
    type: object
  api.CreateFollowRequestBody:
    properties:
      to_user_id:
        type: string
    required:
    - to_user_id
    type: object
  api.CreateHackathonRequestBody:
    properties:
      description:
        type: string
      expired:
        type: string
      icon:
        type: string
      link:
        type: string
      name:
        type: string
      start_date:
        type: string
      status_tags:
        items:
          type: integer
        type: array
      term:
        type: integer
    type: object
  api.CreatePastWorkRequestBody:
    properties:
      account_past_works:
        items:
          type: string
        type: array
      explanatory_text:
        type: string
      name:
        type: string
      past_work_frameworks:
        items:
          type: integer
        type: array
      past_work_tags:
        items:
          type: integer
        type: array
      thumbnail_image:
        items:
          type: integer
        type: array
    type: object
  api.CreatePastWorkResponse:
    properties:
      account_past_works:
        items:
          $ref: '#/definitions/db.AccountPastWorks'
        type: array
      explanatory_text:
        type: string
      name:
        type: string
      opus:
        type: integer
      past_work_frameworks:
        items:
          $ref: '#/definitions/db.PastWorkFrameworks'
        type: array
      past_work_tags:
        items:
          $ref: '#/definitions/db.PastWorkTags'
        type: array
      thumbnail_image:
        items:
          type: integer
        type: array
    type: object
  api.CreateRateRequestBody:
    properties:
      rate:
        type: integer
    type: object
  api.CreateRoomRequestBody:
    properties:
      description:
        type: string
      hackathon_id:
        type: integer
      member_limit:
        type: integer
      title:
        type: string
      user_id:
        type: string
    required:
    - description
    - hackathon_id
    - member_limit
    - title
    - user_id
    type: object
  api.DeleteResponse:
    properties:
      result:
        type: string
    type: object
  api.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  api.GetAccountResponses:
    properties:
      email:
        type: string
      explanatory_text:
        type: string
      frameworks:
        items:
          $ref: '#/definitions/db.Frameworks'
        type: array
      icon:
        type: string
      locate:
        type: string
      rate:
        type: integer
      show_locate:
        type: boolean
      show_rate:
        type: boolean
      tech_tags:
        items:
          $ref: '#/definitions/db.TechTags'
        type: array
      user_id:
        type: string
      username:
        type: string
    type: object
  api.GetRoomResponse:
    properties:
      create_at:
        type: string
      description:
        type: string
      hackathon:
        $ref: '#/definitions/api.hackathonInfo'
      is_status:
        type: boolean
      member_limit:
        type: integer
      members_frameworks:
        items:
          $ref: '#/definitions/db.RoomFramework'
        type: array
      members_tech_tags:
        items:
          $ref: '#/definitions/db.RoomTechTags'
        type: array
      now_member:
        items:
          $ref: '#/definitions/db.NowRoomAccounts'
        type: array
      room_id:
        type: string
      title:
        type: string
    type: object
  api.HackathonResponses:
    properties:
      description:
        type: string
      expired:
        type: string
      hackathon_id:
        type: integer
      icon:
        type: string
      link:
        type: string
      name:
        type: string
      start_date:
        type: string
      status_tags:
        items:
          $ref: '#/definitions/db.StatusTags'
        type: array
      term:
        type: integer
    type: object
  api.RateResponses:
    properties:
      create_at:
        type: string
      rate:
        type: integer
      user_id:
        type: string
    type: object
  api.UpdateAccountRequestBody:
    properties:
      explanatory_text:
        type: string
      hashed_password:
        type: string
      locate_id:
        type: integer
      rate:
        type: integer
      show_locate:
        type: boolean
      show_rate:
        type: boolean
      username:
        type: string
    type: object
  api.UpdateAccountResponse:
    properties:
      created_at:
        type: string
      explanatory_text:
        type: string
      hashed_password:
        type: string
      icon:
        type: string
      locate:
        type: string
      rate:
        type: integer
      show_locate:
        type: boolean
      show_rate:
        type: boolean
      username:
        type: string
    type: object
  api.UpdateRoomRequestBody:
    properties:
      description:
        type: string
      member_limit:
        type: integer
      title:
        type: string
    required:
    - description
    - member_limit
    - title
    type: object
  api.hackathonInfo:
    properties:
      description:
        type: string
      expired:
        type: string
      hackathon_id:
        type: integer
      icon:
        type: string
      link:
        type: string
      name:
        type: string
      start_date:
        type: string
      tags:
        items:
          $ref: '#/definitions/db.StatusTags'
        type: array
      term:
        type: integer
    type: object
  db.AccountPastWorks:
    properties:
      opus:
        type: integer
      user_id:
        type: string
    type: object
  db.CreateRoomTxResult:
    properties:
      accounts:
        items:
          $ref: '#/definitions/db.NowRoomAccounts'
        type: array
      create_at:
        type: string
      description:
        type: string
      frameworks:
        items:
          $ref: '#/definitions/db.RoomFramework'
        type: array
      hackathon:
        $ref: '#/definitions/db.RoomHackathonData'
      hackathon_id:
        type: integer
      is_delete:
        type: boolean
      member_limit:
        type: integer
      room_id:
        type: string
      techtags:
        items:
          $ref: '#/definitions/db.RoomTechTags'
        type: array
      title:
        type: string
    type: object
  db.Follows:
    properties:
      create_at:
        type: string
      from_user_id:
        type: string
      to_user_id:
        type: string
    type: object
  db.Frameworks:
    properties:
      framework:
        type: string
      framework_id:
        type: integer
      tech_tag_id:
        type: integer
    type: object
  db.ListRoomTxHackathonInfo:
    properties:
      hackathon_id:
        type: integer
      hackathon_name:
        type: string
      icon:
        type: string
    type: object
  db.ListRoomTxResult:
    properties:
      hackathon:
        $ref: '#/definitions/db.ListRoomTxHackathonInfo'
      members_frameworks:
        items:
          $ref: '#/definitions/db.RoomFramework'
        type: array
      members_tech_tags:
        items:
          $ref: '#/definitions/db.RoomTechTags'
        type: array
      now_member:
        items:
          $ref: '#/definitions/db.NowRoomAccounts'
        type: array
      rooms:
        $ref: '#/definitions/db.ListRoomTxRoomInfo'
    type: object
  db.ListRoomTxRoomInfo:
    properties:
      created_at:
        type: string
      member_limit:
        type: integer
      room_id:
        type: string
      title:
        type: string
    type: object
  db.Locates:
    properties:
      locate_id:
        type: integer
      name:
        type: string
    type: object
  db.NowRoomAccounts:
    properties:
      icon:
        type: string
      is_owner:
        type: boolean
      user_id:
        type: string
    type: object
  db.PastWorkFrameworks:
    properties:
      framework_id:
        type: integer
      opus:
        type: integer
    type: object
  db.PastWorkTags:
    properties:
      opus:
        type: integer
      tech_tag_id:
        type: integer
    type: object
  db.RoomFramework:
    properties:
      count:
        type: integer
      framework:
        $ref: '#/definitions/db.Frameworks'
    type: object
  db.RoomHackathonData:
    properties:
      icon:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  db.RoomTechTags:
    properties:
      count:
        type: integer
      tech_tag:
        $ref: '#/definitions/db.TechTags'
    type: object
  db.StatusTags:
    properties:
      status:
        type: string
      status_id:
        type: integer
    type: object
  db.TechTags:
    properties:
      language:
        type: string
      tech_tag_id:
        type: integer
    type: object
host: https://seaffood.com
info:
  contact:
    email: oogiriminister@gmail.com
    name: murasame
    url: https://twitter.com/fresh_salmon256
  description: HackPortal Backend API serice
  license:
    name: No-license
    url: No-license
  termsOfService: https://seaffood.com/api
  title: Hack Hack Backend API
  version: "1.0"
paths:
  /accounts:
    post:
      consumes:
      - multipart/form-data
      description: Create an account from the requested body
      parameters:
      - description: AccountsID
        in: body
        name: user_id
        required: true
        schema:
          type: string
      - description: username
        in: body
        name: username
        required: true
        schema:
          type: string
      - description: icon image
        in: formData
        name: icon
        type: file
      - description: explanatory text
        in: body
        name: explanatory_text
        schema:
          type: string
      - description: locate id
        in: body
        name: locate_id
        required: true
        schema:
          type: integer
      - description: password
        in: body
        name: password
        required: true
        schema:
          type: string
      - description: show locate
        in: body
        name: show_locate
        required: true
        schema:
          type: boolean
      - description: show rate
        in: body
        name: show_rate
        required: true
        schema:
          type: boolean
      - description: tech tags
        in: body
        name: tech_tags
        schema:
          items:
            type: integer
          type: array
      - description: frameworks
        in: body
        name: frameworks
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: create success response
          schema:
            $ref: '#/definitions/api.CreateAccountResponses'
        "400":
          description: bad request response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: server error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create new account
      tags:
      - Accounts
  /accounts/{from_user_id}/follow:
    delete:
      description: Unfollow
      parameters:
      - description: Accounts API wildcard
        in: path
        name: from_user_id
        required: true
        type: string
      - in: formData
        name: to_user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/api.DeleteResponse'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Remove follow
      tags:
      - Accounts
    post:
      description: Follow!!!!!!!!
      parameters:
      - description: Accounts API wildcard
        in: path
        name: from_user_id
        required: true
        type: string
      - description: create Follow Request Body
        in: body
        name: CreateFollowRequestBody
        required: true
        schema:
          $ref: '#/definitions/api.CreateFollowRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: succsss response
          schema:
            items:
              $ref: '#/definitions/db.Follows'
            type: array
        "400":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create Follow
      tags:
      - Accounts
  /accounts/{id}/rate:
    get:
      description: List Rate for User
      parameters:
      - in: query
        name: page_id
        type: integer
      - in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            items:
              $ref: '#/definitions/api.RateResponses'
            type: array
        "400":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: List Rate
      tags:
      - Rate
    post:
      description: Create Rate for User
      parameters:
      - description: Create Rate Request Body
        in: body
        name: CreateRateRequestBody
        required: true
        schema:
          $ref: '#/definitions/api.CreateRateRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/api.RateResponses'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create Rate
      tags:
      - Rate
  /accounts/{user_id}:
    delete:
      description: Only you can delete your account (logical delete)
      parameters:
      - description: Accounts API wildcard
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: delete success response
          schema:
            $ref: '#/definitions/api.DeleteResponse'
        "400":
          description: bad request response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: server error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Remove Account
      tags:
      - Accounts
    get:
      description: Return a user from the id specified in the path
      parameters:
      - description: Accounts API wildcard
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get success response
          schema:
            $ref: '#/definitions/api.GetAccountResponses'
        "400":
          description: bad request response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: server error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get account
      tags:
      - Accounts
    put:
      description: Update user info from requested body
      parameters:
      - description: Accounts API wildcard
        in: path
        name: user_id
        required: true
        type: string
      - description: Update Account Request Body
        in: body
        name: UpdateAccountRequestBody
        required: true
        schema:
          $ref: '#/definitions/api.UpdateAccountRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: Update success response
          schema:
            $ref: '#/definitions/api.UpdateAccountResponse'
        "400":
          description: bad request response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: server error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Update Account
      tags:
      - Accounts
  /bookmarks:
    post:
      description: Create a bookmark from the specified hackathon ID
      parameters:
      - description: Create Bookmark Request Body
        in: body
        name: CreateBookmarkRequestBody
        required: true
        schema:
          $ref: '#/definitions/api.CreateBookmarkRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: create success response
          schema:
            $ref: '#/definitions/api.BookmarkResponse'
        "400":
          description: bad request response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: server error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create new bookmark
      tags:
      - Bookmark
  /bookmarks/{hackathon_id}:
    delete:
      description: Delete the bookmark of the specified hackathon ID
      parameters:
      - description: Delete Bookmark Request Body
        in: path
        name: hackathon_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: delete success response
          schema:
            $ref: '#/definitions/api.BookmarkResponse'
        "400":
          description: bad request response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: server error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Delete bookmark
      tags:
      - Bookmark
    get:
      description: Get my bookmarks
      parameters:
      - description: Delete Bookmark Request Body
        in: formData
        name: ListBookmarkRequestQueries
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: delete success response
          schema:
            items:
              $ref: '#/definitions/api.BookmarkResponse'
            type: array
        "400":
          description: bad request response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: server error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get bookmarks
      tags:
      - Bookmark
  /frameworks:
    get:
      description: Get Frameworks
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            items:
              $ref: '#/definitions/db.Frameworks'
            type: array
        "500":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get Frameworks
      tags:
      - Frameworks
  /hackathons:
    get:
      description: List Hackathon
      parameters:
      - description: page size
        in: path
        name: page_size
        required: true
        type: integer
      - description: page id
        in: path
        name: page_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            items:
              $ref: '#/definitions/api.HackathonResponses'
            type: array
        "400":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: List Hackathon
      tags:
      - Hackathon
    post:
      description: Register a hackathon from given parameters
      parameters:
      - description: create hackathon Request Body
        in: body
        name: CreateHackathonRequestBody
        required: true
        schema:
          $ref: '#/definitions/api.CreateHackathonRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/api.HackathonResponses'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create Hackathon
      tags:
      - Hackathon
  /hackathons/{hackathon_id}:
    get:
      description: Get Hackathon
      parameters:
      - description: Hackathons API wildcard
        in: path
        name: hackathon_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/api.HackathonResponses'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get Hackathon
      tags:
      - Hackathon
  /locates:
    get:
      description: Get Frameworks
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            items:
              $ref: '#/definitions/db.Locates'
            type: array
        "500":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get Frameworks
      tags:
      - Locates
  /past_works:
    get:
      description: list pastWorks
      parameters:
      - description: page_size
        in: path
        name: page_size
        required: true
        type: integer
      - description: page_id
        in: path
        name: page_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.CreatePastWorkResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: List pastWorks
      tags:
      - PastWorks
    post:
      consumes:
      - application/json
      description: create pastWork
      parameters:
      - description: past work
        in: body
        name: past_work
        required: true
        schema:
          $ref: '#/definitions/api.CreatePastWorkRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.CreatePastWorkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create pastWork
      tags:
      - PastWorks
  /past_works/{opus}:
    get:
      consumes:
      - application/json
      description: get pastWork
      parameters:
      - description: PastWorks API wildcard
        in: path
        name: opus
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.CreatePastWorkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get pastWork
      tags:
      - PastWorks
  /rooms:
    get:
      description: List Account
      parameters:
      - description: Rooms API wildcard
        in: path
        name: room_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            items:
              items:
                $ref: '#/definitions/db.ListRoomTxResult'
              type: array
            type: array
        "400":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: List Account
      tags:
      - Rooms
    post:
      description: Create Rooms
      parameters:
      - description: create Room Request Body
        in: body
        name: CreateRoomRequestBody
        required: true
        schema:
          $ref: '#/definitions/api.CreateRoomRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/db.CreateRoomTxResult'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create Rooms
      tags:
      - Rooms
  /rooms/{room_id}:
    delete:
      description: delete Room
      parameters:
      - description: Rooms API wildcard
        in: path
        name: room_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/api.DeleteResponse'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: delete Room
      tags:
      - Rooms
    get:
      description: Get Room
      parameters:
      - description: Rooms API wildcard
        in: path
        name: room_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/api.GetRoomResponse'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get Room
      tags:
      - Rooms
    put:
      description: update Room
      parameters:
      - description: Rooms API wildcard
        in: path
        name: room_id
        required: true
        type: string
      - description: update Room Request body
        in: body
        name: UpdateRoomRequestBody
        required: true
        schema:
          $ref: '#/definitions/api.UpdateRoomRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/api.GetRoomResponse'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: update Room
      tags:
      - Rooms
  /rooms/{room_id}/addchat:
    post:
      description: Add Chat Room
      parameters:
      - description: Rooms API wildcard
        in: path
        name: room_id
        required: true
        type: string
      - description: add chat Room Request body
        in: body
        name: AddChatRequestBody
        required: true
        schema:
          $ref: '#/definitions/api.AddChatRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/api.GetRoomResponse'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Add Chat Room
      tags:
      - Rooms
  /rooms/{room_id}/members:
    delete:
      description: Remove Account In Rooms
      parameters:
      - description: Rooms API wildcard
        in: path
        name: room_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/api.DeleteResponse'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Remove Account In Rooms
      tags:
      - Rooms
    post:
      description: Add Account In Rooms
      parameters:
      - description: Rooms API wildcard
        in: path
        name: room_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/db.CreateRoomTxResult'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Add Account In Rooms
      tags:
      - Rooms
  /tech_tags:
    get:
      description: Get Frameworks
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            items:
              $ref: '#/definitions/db.TechTags'
            type: array
        "500":
          description: error response
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get Frameworks
      tags:
      - TechTags
swagger: "2.0"
