basePath: /api/v1
definitions:
  controller.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  controller.SuccessResponse:
    properties:
      result:
        type: string
    type: object
  domain.AccountRateResponse:
    properties:
      account_id:
        type: string
      icon:
        type: string
      rate:
        type: integer
      username:
        type: string
    type: object
  domain.AccountResponses:
    properties:
      account_id:
        type: string
      discord_link:
        type: string
      email:
        type: string
      explanatory_text:
        type: string
      frameworks:
        items:
          $ref: '#/definitions/repository.Framework'
        type: array
      github_link:
        type: string
      icon:
        type: string
      locate:
        type: string
      rate:
        type: integer
      show_locate:
        type: boolean
      show_rate:
        type: boolean
      tech_tags:
        items:
          $ref: '#/definitions/repository.TechTag'
        type: array
      twitter_link:
        type: string
      username:
        type: string
    type: object
  domain.AddAccountInRoomRequestBody:
    properties:
      account_id:
        type: string
    type: object
  domain.AddChatRequestBody:
    properties:
      account_id:
        type: string
      message:
        type: string
    required:
    - account_id
    - message
    type: object
  domain.CreateAccountRequest:
    properties:
      account_id:
        type: string
      explanatory_text:
        type: string
      frameworks:
        type: string
      locate_id:
        type: integer
      show_locate:
        type: boolean
      show_rate:
        type: boolean
      tech_tags:
        type: string
      username:
        type: string
    required:
    - account_id
    - locate_id
    - username
    type: object
  domain.CreateFollowRequestBody:
    properties:
      to_account_id:
        type: string
    required:
    - to_account_id
    type: object
  domain.CreateHackathonRequestBody:
    properties:
      description:
        type: string
      expired:
        type: string
      link:
        type: string
      name:
        type: string
      start_date:
        type: string
      status_tags:
        items:
          type: integer
        type: array
      term:
        type: integer
    type: object
  domain.CreateRateRequestBody:
    properties:
      rate:
        type: integer
    type: object
  domain.CreateRoomRequestBody:
    properties:
      account_id:
        type: string
      description:
        type: string
      hackathon_id:
        type: integer
      member_limit:
        type: integer
      title:
        type: string
    required:
    - account_id
    - description
    - hackathon_id
    - member_limit
    - title
    type: object
  domain.FollowResponse:
    properties:
      account_id:
        type: string
      icon:
        type: string
      username:
        type: string
    type: object
  domain.GetJoinRoomResponse:
    properties:
      room_id:
        type: string
      title:
        type: string
    type: object
  domain.GetRoomResponse:
    properties:
      description:
        type: string
      hackathon:
        $ref: '#/definitions/domain.RoomHackathonInfo'
      is_status:
        type: boolean
      member_limit:
        type: integer
      now_member:
        items:
          $ref: '#/definitions/domain.NowRoomAccounts'
        type: array
      room_id:
        type: string
      title:
        type: string
    type: object
  domain.HackathonResponses:
    properties:
      description:
        type: string
      expired:
        type: string
      hackathon_id:
        type: integer
      icon:
        type: string
      link:
        type: string
      name:
        type: string
      start_date:
        type: string
      status_tags:
        items:
          $ref: '#/definitions/repository.StatusTag'
        type: array
      term:
        type: integer
    type: object
  domain.ListPastWorkResponse:
    properties:
      explanatory_text:
        type: string
      frameworks:
        items:
          $ref: '#/definitions/repository.Framework'
        type: array
      members:
        items:
          $ref: '#/definitions/domain.PastWorkMembers'
        type: array
      name:
        type: string
      opus:
        type: integer
      tech_tags:
        items:
          $ref: '#/definitions/repository.TechTag'
        type: array
    type: object
  domain.ListRoomHackathonInfo:
    properties:
      expired:
        type: string
      hackathon_id:
        type: integer
      hackathon_name:
        type: string
      icon:
        type: string
    type: object
  domain.ListRoomResponse:
    properties:
      hackathon:
        $ref: '#/definitions/domain.ListRoomHackathonInfo'
      members_frameworks:
        items:
          $ref: '#/definitions/domain.RoomFramework'
        type: array
      members_tech_tags:
        items:
          $ref: '#/definitions/domain.RoomTechTags'
        type: array
      now_member:
        items:
          $ref: '#/definitions/domain.NowRoomAccounts'
        type: array
      rooms:
        $ref: '#/definitions/domain.ListRoomRoomInfo'
    type: object
  domain.ListRoomRoomInfo:
    properties:
      created_at:
        type: string
      member_limit:
        type: integer
      room_id:
        type: string
      title:
        type: string
    type: object
  domain.NowRoomAccounts:
    properties:
      account_id:
        type: string
      frameworks:
        items:
          $ref: '#/definitions/repository.Framework'
        type: array
      icon:
        type: string
      is_owner:
        type: boolean
      roles:
        items:
          $ref: '#/definitions/repository.Role'
        type: array
      tech_tags:
        items:
          $ref: '#/definitions/repository.TechTag'
        type: array
      username:
        type: string
    type: object
  domain.PastWorkMembers:
    properties:
      account_id:
        type: string
      icon:
        type: string
      name:
        type: string
    type: object
  domain.PastWorkRequestBody:
    properties:
      account_past_works:
        type: string
      explanatory_text:
        type: string
      name:
        type: string
      past_work_frameworks:
        type: string
      past_work_tags:
        type: string
    type: object
  domain.PastWorkResponse:
    properties:
      award_data_id:
        type: integer
      create_at:
        type: string
      explanatory_text:
        type: string
      frameworks:
        items:
          $ref: '#/definitions/repository.Framework'
        type: array
      is_delete:
        type: boolean
      members:
        items:
          $ref: '#/definitions/domain.PastWorkMembers'
        type: array
      name:
        type: string
      opus:
        type: integer
      tech_tags:
        items:
          $ref: '#/definitions/repository.TechTag'
        type: array
      thumbnail_image:
        type: string
      update_at:
        type: string
    type: object
  domain.RoomAccountRoleByIDRequestBody:
    properties:
      account_id:
        type: string
      role_id:
        type: integer
    type: object
  domain.RoomFramework:
    properties:
      count:
        type: integer
      framework:
        $ref: '#/definitions/repository.Framework'
    type: object
  domain.RoomHackathonInfo:
    properties:
      expired:
        type: string
      hackathon_id:
        type: integer
      icon:
        type: string
      link:
        type: string
      name:
        type: string
      start_date:
        type: string
      status_tag:
        items:
          $ref: '#/definitions/repository.StatusTag'
        type: array
      term:
        type: integer
    type: object
  domain.RoomTechTags:
    properties:
      count:
        type: integer
      tech_tag:
        $ref: '#/definitions/repository.TechTag'
    type: object
  domain.UpdateAccountRequest:
    properties:
      discord_link:
        type: string
      explanatory_text:
        type: string
      frameworks:
        type: string
      github_link:
        type: string
      locate_id:
        type: integer
      show_locate:
        type: boolean
      show_rate:
        type: boolean
      tech_tags:
        type: string
      twitter_link:
        type: string
      username:
        type: string
    type: object
  domain.UpdateRoomAccountRoleRequestBody:
    properties:
      account_id:
        type: string
      role_id:
        items:
          type: integer
        type: array
    type: object
  domain.UpdateRoomRequestBody:
    properties:
      description:
        type: string
      hackathonID:
        type: integer
      member_limit:
        type: integer
      title:
        type: string
    type: object
  repository.Framework:
    properties:
      framework:
        type: string
      framework_id:
        type: integer
      tech_tag_id:
        type: integer
    type: object
  repository.Locate:
    properties:
      locate_id:
        type: integer
      name:
        type: string
    type: object
  repository.Role:
    properties:
      role:
        type: string
      role_id:
        type: integer
    type: object
  repository.StatusTag:
    properties:
      status:
        type: string
      status_id:
        type: integer
    type: object
  repository.TechTag:
    properties:
      icon:
        type: string
      language:
        type: string
      tech_tag_id:
        type: integer
    type: object
host: https://seaffood.com
info:
  contact:
    email: oogiriminister@gmail.com
    name: murasame
    url: https://twitter.com/fresh_salmon256
  description: HackPortal Backend API serice
  license:
    name: No-license
    url: No-license
  termsOfService: https://seaffood.com/api
  title: Hack Hack Backend API
  version: "1.0"
paths:
  /accounts:
    post:
      consumes:
      - multipart/form-data
      description: Create an account from the requested body
      parameters:
      - description: Create Account Request
        in: body
        name: CreateAccountRequest
        required: true
        schema:
          $ref: '#/definitions/domain.CreateAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: create success response
          schema:
            $ref: '#/definitions/domain.AccountResponses'
        "400":
          description: bad request response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: server error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Create new account
      tags:
      - Accounts
  /accounts/{account_id}:
    delete:
      description: Only you can delete your account (logical delete)
      parameters:
      - description: Accounts API wildcard
        in: path
        name: account_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: delete success response
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: bad request response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: server error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Remove Account
      tags:
      - Accounts
    get:
      description: Return a account from the id specified in the path
      parameters:
      - description: Accounts API wildcard
        in: path
        name: account_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get success response
          schema:
            $ref: '#/definitions/domain.AccountResponses'
        "400":
          description: bad request response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: server error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get account
      tags:
      - Accounts
    put:
      description: Update account info from requested body
      parameters:
      - description: Accounts API wildcard
        in: path
        name: account_id
        required: true
        type: string
      - description: Update Account Request Body
        in: body
        name: UpdateAccountRequest
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Update success response
          schema:
            $ref: '#/definitions/domain.AccountResponses'
        "400":
          description: bad request response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: server error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Update Account
      tags:
      - Accounts
  /accounts/{account_id}/rate:
    get:
      description: List Rate for User
      parameters:
      - description: Account ID
        in: path
        name: account_id
        required: true
        type: string
      - in: query
        name: page_id
        type: integer
      - in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            items:
              $ref: '#/definitions/domain.AccountRateResponse'
            type: array
        "400":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: List Rate
      tags:
      - Rate
    post:
      description: Create Rate for User
      parameters:
      - description: Create Rate Request Body
        in: body
        name: CreateRateRequestBody
        required: true
        schema:
          $ref: '#/definitions/domain.CreateRateRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Create Rate
      tags:
      - Rate
  /accounts/{account_id}/rooms:
    get:
      description: Get Join Room
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            items:
              $ref: '#/definitions/domain.GetJoinRoomResponse'
            type: array
        "400":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get Join Room
      tags:
      - Accounts
  /accounts/{from_account_id}/follow:
    delete:
      description: Remove follow account
      parameters:
      - description: Accounts API wildcard
        in: path
        name: from_account_id
        required: true
        type: string
      - in: query
        name: account_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Remove follow
      tags:
      - Accounts
    get:
      description: Get follow account
      parameters:
      - description: Accounts API wildcard
        in: path
        name: from_account_id
        required: true
        type: string
      - in: query
        name: mode
        type: boolean
      - in: query
        name: page_id
        type: string
      - in: query
        name: page_size
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            items:
              $ref: '#/definitions/domain.FollowResponse'
            type: array
        "400":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get follow
      tags:
      - Accounts
    post:
      description: Follow!!!!!!!!
      parameters:
      - description: Accounts API wildcard
        in: path
        name: from_account_id
        required: true
        type: string
      - description: create Follow Request Body
        in: body
        name: CreateFollowRequestBody
        required: true
        schema:
          $ref: '#/definitions/domain.CreateFollowRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            items:
              $ref: '#/definitions/domain.FollowResponse'
            type: array
        "400":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Create Follow
      tags:
      - Accounts
  /frameworks:
    get:
      description: Get Frameworks
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            items:
              $ref: '#/definitions/repository.Framework'
            type: array
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get Frameworks
      tags:
      - Frameworks
  /hackathons:
    get:
      description: List Hackathon
      parameters:
      - in: query
        name: expired
        type: boolean
      - in: query
        name: page_id
        type: integer
      - in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            items:
              $ref: '#/definitions/domain.HackathonResponses'
            type: array
        "400":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: List Hackathon
      tags:
      - Hackathon
    post:
      description: Register a hackathon from given parameters
      parameters:
      - description: create hackathon Request Body
        in: body
        name: CreateHackathonRequestBody
        required: true
        schema:
          $ref: '#/definitions/domain.CreateHackathonRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/domain.HackathonResponses'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Create Hackathon
      tags:
      - Hackathon
  /hackathons/{hackathon_id}:
    get:
      description: Get Hackathon
      parameters:
      - description: Hackathons API wildcard
        in: path
        name: hackathon_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/domain.HackathonResponses'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get Hackathon
      tags:
      - Hackathon
  /locates:
    get:
      description: Get Frameworks
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            items:
              $ref: '#/definitions/repository.Locate'
            type: array
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get Frameworks
      tags:
      - Locates
  /pastworks:
    get:
      description: List PastWork
      parameters:
      - in: query
        name: page_id
        type: integer
      - in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.ListPastWorkResponse'
            type: array
        "400":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: List PastWork
      tags:
      - PastWorks
    post:
      description: Create a past work from the requested body
      parameters:
      - description: Create PastWork Request
        in: body
        name: CreatePastWorkRequest
        required: true
        schema:
          $ref: '#/definitions/domain.PastWorkRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: create success response
          schema:
            $ref: '#/definitions/domain.PastWorkResponse'
        "400":
          description: bad request response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: server error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Create new past work
      tags:
      - PastWorks
  /pastworks/{opus}:
    delete:
      description: Delete PastWork
      parameters:
      - description: PastWorks API wildcard
        in: path
        name: opus
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Delete PastWork
      tags:
      - PastWorks
    get:
      description: Get PastWork
      parameters:
      - description: PastWorks API wildcard
        in: path
        name: opus
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.PastWorkResponse'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get PastWork
      tags:
      - PastWorks
    put:
      description: Update PastWork
      parameters:
      - description: PastWorks API wildcard
        in: path
        name: opus
        required: true
        type: string
      - description: Update PastWork Request
        in: body
        name: UpdatePastWorkRequest
        required: true
        schema:
          $ref: '#/definitions/domain.PastWorkRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.PastWorkResponse'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Update PastWork
      tags:
      - PastWorks
  /rate:
    get:
      description: List Account Rate
      parameters:
      - in: query
        name: page_id
        type: integer
      - in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            items:
              $ref: '#/definitions/domain.AccountRateResponse'
            type: array
        "400":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: List Account Rate
      tags:
      - Rate
  /roles:
    get:
      description: Get Roles
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            items:
              $ref: '#/definitions/repository.Role'
            type: array
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get Roles
      tags:
      - Roles
  /rooms:
    get:
      description: List Account
      parameters:
      - in: query
        name: page_id
        type: integer
      - in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            items:
              $ref: '#/definitions/domain.ListRoomResponse'
            type: array
        "400":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: List Account
      tags:
      - Rooms
    post:
      description: Create Rooms
      parameters:
      - description: create Room Request Body
        in: body
        name: CreateRoomRequestBody
        required: true
        schema:
          $ref: '#/definitions/domain.CreateRoomRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/domain.GetRoomResponse'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Create Rooms
      tags:
      - Rooms
  /rooms/:room_id/roles:
    post:
      description: Add a role for an account in a room
      parameters:
      - description: Rooms API wildcard
        in: path
        name: rooms_account_id
        required: true
        type: string
      - description: add role for an account in a room Request body
        in: body
        name: RoomAccountRoleByIDRequestBody
        required: true
        schema:
          $ref: '#/definitions/domain.RoomAccountRoleByIDRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Add a role for an account in a room
      tags:
      - Rooms
    put:
      description: Update a role for an account in a room
      parameters:
      - description: Rooms API wildcard
        in: path
        name: rooms_account_id
        required: true
        type: string
      - description: update role for an account in a room Request body
        in: body
        name: RoomAccountRoleByIDRequestBody
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateRoomAccountRoleRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Update a role for an account in a room
      tags:
      - Rooms
  /rooms/{room_id}:
    delete:
      description: delete Room
      parameters:
      - description: Rooms API wildcard
        in: path
        name: room_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: delete Room
      tags:
      - Rooms
    get:
      description: Get Room
      parameters:
      - description: Rooms API wildcard
        in: path
        name: room_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/domain.GetRoomResponse'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get Room
      tags:
      - Rooms
    put:
      description: update Room
      parameters:
      - description: Rooms API wildcard
        in: path
        name: room_id
        required: true
        type: string
      - description: update Room Request body
        in: body
        name: UpdateRoomRequestBody
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateRoomRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/domain.GetRoomResponse'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: update Room
      tags:
      - Rooms
  /rooms/{room_id}/addchat:
    post:
      description: Add Chat Room
      parameters:
      - description: Rooms API wildcard
        in: path
        name: room_id
        required: true
        type: string
      - description: add chat Room Request body
        in: body
        name: AddChatRequestBody
        required: true
        schema:
          $ref: '#/definitions/domain.AddChatRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/domain.GetRoomResponse'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Add Chat Room
      tags:
      - Rooms
  /rooms/{room_id}/members:
    delete:
      description: Remove Account In Rooms
      parameters:
      - description: Rooms API wildcard
        in: path
        name: room_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Remove Account In Rooms
      tags:
      - Rooms
    post:
      description: Add Account In Rooms
      parameters:
      - description: Rooms API wildcard
        in: path
        name: room_id
        required: true
        type: string
      - description: add account in room Request body
        in: body
        name: AddAccountInRoomRequestBody
        required: true
        schema:
          $ref: '#/definitions/domain.AddAccountInRoomRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Add Account In Rooms
      tags:
      - Rooms
  /status_tags:
    get:
      description: Get Frameworks
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            items:
              $ref: '#/definitions/repository.StatusTag'
            type: array
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get Frameworks
      tags:
      - TechTags
  /tech_tags:
    get:
      description: Get Frameworks
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            items:
              $ref: '#/definitions/repository.TechTag'
            type: array
        "500":
          description: error response
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get Frameworks
      tags:
      - TechTags
swagger: "2.0"
