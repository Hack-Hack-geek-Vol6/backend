// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: past_work_frameworks.sql

package db

import (
	"context"
	"database/sql"
)

const createPastWorkFramework = `-- name: CreatePastWorkFramework :one
INSERT INTO past_work_frameworks (
    opus,
    framework_id
)VALUES(
    $1,$2
)RETURNING opus, framework_id
`

type CreatePastWorkFrameworkParams struct {
	Opus        int32 `json:"opus"`
	FrameworkID int32 `json:"framework_id"`
}

func (q *Queries) CreatePastWorkFramework(ctx context.Context, arg CreatePastWorkFrameworkParams) (PastWorkFrameworks, error) {
	row := q.db.QueryRowContext(ctx, createPastWorkFramework, arg.Opus, arg.FrameworkID)
	var i PastWorkFrameworks
	err := row.Scan(&i.Opus, &i.FrameworkID)
	return i, err
}

const listPastWorkFrameworks = `-- name: ListPastWorkFrameworks :many
SELECT 
    frameworks.framework_id,
    frameworks.tech_tag_id,
    frameworks.framework
FROM 
    past_work_frameworks
LEFT OUTER JOIN 
    frameworks 
ON 
    past_work_frameworks.framework_id = frameworks.framework_id 
WHERE 
    past_work_frameworks.opus = $1
`

type ListPastWorkFrameworksRow struct {
	FrameworkID sql.NullInt32  `json:"framework_id"`
	TechTagID   sql.NullInt32  `json:"tech_tag_id"`
	Framework   sql.NullString `json:"framework"`
}

func (q *Queries) ListPastWorkFrameworks(ctx context.Context, opus int32) ([]ListPastWorkFrameworksRow, error) {
	rows, err := q.db.QueryContext(ctx, listPastWorkFrameworks, opus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPastWorkFrameworksRow{}
	for rows.Next() {
		var i ListPastWorkFrameworksRow
		if err := rows.Scan(&i.FrameworkID, &i.TechTagID, &i.Framework); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
