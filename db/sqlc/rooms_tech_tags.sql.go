// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: rooms_tech_tags.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createRoomsTechTag = `-- name: CreateRoomsTechTag :one
INSERT INTO rooms_tech_tags (
    room_id,
    tech_tag_id
)VALUES(
    $1,$2
)RETURNING room_id, tech_tag_id
`

type CreateRoomsTechTagParams struct {
	RoomID    uuid.UUID `json:"room_id"`
	TechTagID int32     `json:"tech_tag_id"`
}

func (q *Queries) CreateRoomsTechTag(ctx context.Context, arg CreateRoomsTechTagParams) (RoomsTechTags, error) {
	row := q.db.QueryRowContext(ctx, createRoomsTechTag, arg.RoomID, arg.TechTagID)
	var i RoomsTechTags
	err := row.Scan(&i.RoomID, &i.TechTagID)
	return i, err
}

const getRoomsTechTags = `-- name: GetRoomsTechTags :many
SELECT 
    tech_tags.tech_tag_id,
    tech_tags.language
FROM 
    rooms_tech_tags
LEFT OUTER JOIN 
    tech_tags 
ON 
    rooms_tech_tags.tech_tag_id = tech_tags.tech_tag_id
WHERE 
    rooms_tech_tags.room_id = $1
`

type GetRoomsTechTagsRow struct {
	TechTagID sql.NullInt32  `json:"tech_tag_id"`
	Language  sql.NullString `json:"language"`
}

func (q *Queries) GetRoomsTechTags(ctx context.Context, roomID uuid.UUID) ([]GetRoomsTechTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRoomsTechTags, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRoomsTechTagsRow{}
	for rows.Next() {
		var i GetRoomsTechTagsRow
		if err := rows.Scan(&i.TechTagID, &i.Language); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
