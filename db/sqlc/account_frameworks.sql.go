// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: account_frameworks.sql

package db

import (
	"context"
	"database/sql"
)

const createAccountFramework = `-- name: CreateAccountFramework :one
INSERT INTO account_frameworks (
    user_id,
    framework_id
)VALUES(
    $1,$2
)RETURNING user_id, framework_id
`

type CreateAccountFrameworkParams struct {
	UserID      string `json:"user_id"`
	FrameworkID int32  `json:"framework_id"`
}

func (q *Queries) CreateAccountFramework(ctx context.Context, arg CreateAccountFrameworkParams) (AccountFrameworks, error) {
	row := q.db.QueryRowContext(ctx, createAccountFramework, arg.UserID, arg.FrameworkID)
	var i AccountFrameworks
	err := row.Scan(&i.UserID, &i.FrameworkID)
	return i, err
}

const listAccountFrameworksByUserID = `-- name: ListAccountFrameworksByUserID :many
SELECT 
    frameworks.framework_id,
    frameworks.tech_tag_id,
    frameworks.framework
FROM 
    account_frameworks
LEFT OUTER JOIN 
    frameworks 
ON 
    account_frameworks.framework_id = frameworks.framework_id 
WHERE 
    account_frameworks.user_Id = $1
`

type ListAccountFrameworksByUserIDRow struct {
	FrameworkID sql.NullInt32  `json:"framework_id"`
	TechTagID   sql.NullInt32  `json:"tech_tag_id"`
	Framework   sql.NullString `json:"framework"`
}

func (q *Queries) ListAccountFrameworksByUserID(ctx context.Context, userID string) ([]ListAccountFrameworksByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listAccountFrameworksByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAccountFrameworksByUserIDRow{}
	for rows.Next() {
		var i ListAccountFrameworksByUserIDRow
		if err := rows.Scan(&i.FrameworkID, &i.TechTagID, &i.Framework); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
