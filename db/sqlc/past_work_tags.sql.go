// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: past_work_tags.sql

package db

import (
	"context"
	"database/sql"
)

const createPastWorkTag = `-- name: CreatePastWorkTag :one
INSERT INTO past_work_tags (
    opus,
    tech_tag_id
)VALUES(
    $1,$2
)RETURNING opus, tech_tag_id
`

type CreatePastWorkTagParams struct {
	Opus      int32 `json:"opus"`
	TechTagID int32 `json:"tech_tag_id"`
}

func (q *Queries) CreatePastWorkTag(ctx context.Context, arg CreatePastWorkTagParams) (PastWorkTags, error) {
	row := q.db.QueryRowContext(ctx, createPastWorkTag, arg.Opus, arg.TechTagID)
	var i PastWorkTags
	err := row.Scan(&i.Opus, &i.TechTagID)
	return i, err
}

const getPastWorkTags = `-- name: GetPastWorkTags :many
SELECT 
    tech_tags.tech_tag_id,
    tech_tags.tech_tag
FROM 
    past_work_tags
LEFT OUTER JOIN 
    tech_tags 
ON 
    past_work_tags.tech_tag_id = tech_tags.tech_tag_id 
WHERE 
    past_work_tags.opus = $1
`

type GetPastWorkTagsRow struct {
	TechTagID sql.NullInt32  `json:"tech_tag_id"`
	TechTag   sql.NullString `json:"tech_tag"`
}

func (q *Queries) GetPastWorkTags(ctx context.Context, opus int32) ([]GetPastWorkTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPastWorkTags, opus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPastWorkTagsRow{}
	for rows.Next() {
		var i GetPastWorkTagsRow
		if err := rows.Scan(&i.TechTagID, &i.TechTag); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
