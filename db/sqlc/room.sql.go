// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: room.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms (
    room_id,
    hackathon_id,
    title,
    description,
    member_limit,
    is_status
)VALUES(
    $1,$2,$3,$4,$5,$6
)RETURNING room_id, hackathon_id, title, description, member_limit, is_status, create_at
`

type CreateRoomParams struct {
	RoomID      uuid.UUID `json:"room_id"`
	HackathonID int32     `json:"hackathon_id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	MemberLimit int32     `json:"member_limit"`
	IsStatus    bool      `json:"is_status"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Rooms, error) {
	row := q.db.QueryRowContext(ctx, createRoom,
		arg.RoomID,
		arg.HackathonID,
		arg.Title,
		arg.Description,
		arg.MemberLimit,
		arg.IsStatus,
	)
	var i Rooms
	err := row.Scan(
		&i.RoomID,
		&i.HackathonID,
		&i.Title,
		&i.Description,
		&i.MemberLimit,
		&i.IsStatus,
		&i.CreateAt,
	)
	return i, err
}

const getRoomsByID = `-- name: GetRoomsByID :one
SELECT room_id, hackathon_id, title, description, member_limit, is_status, create_at FROM rooms WHERE room_id = $1
`

func (q *Queries) GetRoomsByID(ctx context.Context, roomID uuid.UUID) (Rooms, error) {
	row := q.db.QueryRowContext(ctx, getRoomsByID, roomID)
	var i Rooms
	err := row.Scan(
		&i.RoomID,
		&i.HackathonID,
		&i.Title,
		&i.Description,
		&i.MemberLimit,
		&i.IsStatus,
		&i.CreateAt,
	)
	return i, err
}

const listRoom = `-- name: ListRoom :many
SELECT 
    room_id, hackathon_id, title, description, member_limit, is_status, create_at 
FROM 
    rooms 
WHERE 
    member_limit > (
        SELECT count(*) 
        FROM rooms_accounts 
        WHERE rooms_accounts.room_id = rooms.room_id
        ) 
    AND
    is_status = TRUE 
LIMIT $1
`

func (q *Queries) ListRoom(ctx context.Context, limit int32) ([]Rooms, error) {
	rows, err := q.db.QueryContext(ctx, listRoom, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Rooms{}
	for rows.Next() {
		var i Rooms
		if err := rows.Scan(
			&i.RoomID,
			&i.HackathonID,
			&i.Title,
			&i.Description,
			&i.MemberLimit,
			&i.IsStatus,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
