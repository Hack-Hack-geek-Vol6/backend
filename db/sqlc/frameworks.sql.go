// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: frameworks.sql

package db

import (
	"context"
)

const deleteFrameworksByID = `-- name: DeleteFrameworksByID :exec
DELETE FROM
    frameworks
WHERE
    framework_id = $1
`

func (q *Queries) DeleteFrameworksByID(ctx context.Context, frameworkID int32) error {
	_, err := q.db.ExecContext(ctx, deleteFrameworksByID, frameworkID)
	return err
}

const getFrameworksByID = `-- name: GetFrameworksByID :one
SELECT
    framework_id, tech_tag_id, framework
FROM
    frameworks
WHERE
    framework_id = $1
`

func (q *Queries) GetFrameworksByID(ctx context.Context, frameworkID int32) (Frameworks, error) {
	row := q.db.QueryRowContext(ctx, getFrameworksByID, frameworkID)
	var i Frameworks
	err := row.Scan(&i.FrameworkID, &i.TechTagID, &i.Framework)
	return i, err
}

const listFrameworks = `-- name: ListFrameworks :many
SELECT
    framework_id, tech_tag_id, framework
FROM
    frameworks
LIMIT
    $1
`

func (q *Queries) ListFrameworks(ctx context.Context, limit int32) ([]Frameworks, error) {
	rows, err := q.db.QueryContext(ctx, listFrameworks, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Frameworks{}
	for rows.Next() {
		var i Frameworks
		if err := rows.Scan(&i.FrameworkID, &i.TechTagID, &i.Framework); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFrameworksByID = `-- name: UpdateFrameworksByID :one
UPDATE frameworks SET framework = $1 , tech_tag_id = $2 WHERE framework_id = $3 RETURNING framework_id, tech_tag_id, framework
`

type UpdateFrameworksByIDParams struct {
	Framework   string `json:"framework"`
	TechTagID   int32  `json:"tech_tag_id"`
	FrameworkID int32  `json:"framework_id"`
}

func (q *Queries) UpdateFrameworksByID(ctx context.Context, arg UpdateFrameworksByIDParams) (Frameworks, error) {
	row := q.db.QueryRowContext(ctx, updateFrameworksByID, arg.Framework, arg.TechTagID, arg.FrameworkID)
	var i Frameworks
	err := row.Scan(&i.FrameworkID, &i.TechTagID, &i.Framework)
	return i, err
}
