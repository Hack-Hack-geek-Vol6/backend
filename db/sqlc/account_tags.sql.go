// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: account_tags.sql

package db

import (
	"context"
	"database/sql"
)

const creataAccountTags = `-- name: CreataAccountTags :one
INSERT INTO account_tags (
    user_id,
    tech_tag_id
)VALUES(
    $1,$2
)RETURNING user_id, tech_tag_id
`

type CreataAccountTagsParams struct {
	UserID    string `json:"user_id"`
	TechTagID int32  `json:"tech_tag_id"`
}

func (q *Queries) CreataAccountTags(ctx context.Context, arg CreataAccountTagsParams) (AccountTags, error) {
	row := q.db.QueryRowContext(ctx, creataAccountTags, arg.UserID, arg.TechTagID)
	var i AccountTags
	err := row.Scan(&i.UserID, &i.TechTagID)
	return i, err
}

const getAccountTags = `-- name: GetAccountTags :many
SELECT 
    tech_tags.tech_tag_id,
    tech_tags.tech_tag
FROM 
    account_tags
LEFT OUTER JOIN 
    tech_tags 
ON 
    account_tags.tech_tag_id = tech_tags.tech_tag_id 
WHERE 
    account_tags.user_id = $1
`

type GetAccountTagsRow struct {
	TechTagID sql.NullInt32  `json:"tech_tag_id"`
	TechTag   sql.NullString `json:"tech_tag"`
}

func (q *Queries) GetAccountTags(ctx context.Context, userID string) ([]GetAccountTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAccountTags, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAccountTagsRow{}
	for rows.Next() {
		var i GetAccountTagsRow
		if err := rows.Scan(&i.TechTagID, &i.TechTag); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
