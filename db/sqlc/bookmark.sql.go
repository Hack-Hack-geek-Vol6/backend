// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: bookmark.sql

package db

import (
	"context"
)

const createBookmark = `-- name: CreateBookmark :one
INSERT INTO bookmarks(
    hackathon_id,
    user_id
)VALUES(
    $1,$2
)RETURNING hackathon_id, user_id
`

type CreateBookmarkParams struct {
	HackathonID int32  `json:"hackathon_id"`
	UserID      string `json:"user_id"`
}

func (q *Queries) CreateBookmark(ctx context.Context, arg CreateBookmarkParams) (Bookmarks, error) {
	row := q.db.QueryRowContext(ctx, createBookmark, arg.HackathonID, arg.UserID)
	var i Bookmarks
	err := row.Scan(&i.HackathonID, &i.UserID)
	return i, err
}

const listBookmark = `-- name: ListBookmark :many
SELECT hackathon_id, user_id FROM bookmarks WHERE user_id = $1
`

func (q *Queries) ListBookmark(ctx context.Context, userID string) ([]Bookmarks, error) {
	rows, err := q.db.QueryContext(ctx, listBookmark, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Bookmarks{}
	for rows.Next() {
		var i Bookmarks
		if err := rows.Scan(&i.HackathonID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
