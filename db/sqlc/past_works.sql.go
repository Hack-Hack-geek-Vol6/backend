// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: past_works.sql

package db

import (
	"context"
)

const createPastWorks = `-- name: CreatePastWorks :one
INSERT INTO past_works (
    opus,
    name,
    thumbnail_image,
    explanatory_text
  )
VALUES ($1, $2, $3, $4)
RETURNING opus, name, thumbnail_image, explanatory_text, create_at, is_delete
`

type CreatePastWorksParams struct {
	Opus            int32  `json:"opus"`
	Name            string `json:"name"`
	ThumbnailImage  []byte `json:"thumbnail_image"`
	ExplanatoryText string `json:"explanatory_text"`
}

func (q *Queries) CreatePastWorks(ctx context.Context, arg CreatePastWorksParams) (PastWorks, error) {
	row := q.db.QueryRowContext(ctx, createPastWorks,
		arg.Opus,
		arg.Name,
		arg.ThumbnailImage,
		arg.ExplanatoryText,
	)
	var i PastWorks
	err := row.Scan(
		&i.Opus,
		&i.Name,
		&i.ThumbnailImage,
		&i.ExplanatoryText,
		&i.CreateAt,
		&i.IsDelete,
	)
	return i, err
}

const getPastWorksByOpus = `-- name: GetPastWorksByOpus :one
SELECT opus, name, thumbnail_image, explanatory_text, create_at, is_delete
FROM past_works
WHERE opus = $1
`

func (q *Queries) GetPastWorksByOpus(ctx context.Context, opus int32) (PastWorks, error) {
	row := q.db.QueryRowContext(ctx, getPastWorksByOpus, opus)
	var i PastWorks
	err := row.Scan(
		&i.Opus,
		&i.Name,
		&i.ThumbnailImage,
		&i.ExplanatoryText,
		&i.CreateAt,
		&i.IsDelete,
	)
	return i, err
}

const listPastWorks = `-- name: ListPastWorks :many
SELECT opus,
  name,
  explanatory_text
FROM past_works
LIMIT $1 OFFSET $2
`

type ListPastWorksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListPastWorksRow struct {
	Opus            int32  `json:"opus"`
	Name            string `json:"name"`
	ExplanatoryText string `json:"explanatory_text"`
}

func (q *Queries) ListPastWorks(ctx context.Context, arg ListPastWorksParams) ([]ListPastWorksRow, error) {
	rows, err := q.db.QueryContext(ctx, listPastWorks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPastWorksRow{}
	for rows.Next() {
		var i ListPastWorksRow
		if err := rows.Scan(&i.Opus, &i.Name, &i.ExplanatoryText); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
