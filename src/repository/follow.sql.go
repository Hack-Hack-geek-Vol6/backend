// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: follow.sql

package repository

import (
	"context"
)

const createFollows = `-- name: CreateFollows :one
INSERT INTO
  follows (to_account_id, from_account_id)
VALUES
($1, $2) RETURNING to_account_id, from_account_id, create_at
`

type CreateFollowsParams struct {
	ToAccountID   string `json:"to_account_id"`
	FromAccountID string `json:"from_account_id"`
}

func (q *Queries) CreateFollows(ctx context.Context, arg CreateFollowsParams) (Follow, error) {
	row := q.db.QueryRow(ctx, createFollows, arg.ToAccountID, arg.FromAccountID)
	var i Follow
	err := row.Scan(&i.ToAccountID, &i.FromAccountID, &i.CreateAt)
	return i, err
}

const deleteFollows = `-- name: DeleteFollows :exec
DELETE FROM
  follows
WHERE
  to_account_id = $1
  AND from_account_id = $2
`

type DeleteFollowsParams struct {
	ToAccountID   string `json:"to_account_id"`
	FromAccountID string `json:"from_account_id"`
}

func (q *Queries) DeleteFollows(ctx context.Context, arg DeleteFollowsParams) error {
	_, err := q.db.Exec(ctx, deleteFollows, arg.ToAccountID, arg.FromAccountID)
	return err
}

const listFollowsByFromUserID = `-- name: ListFollowsByFromUserID :many
SELECT
  to_account_id, from_account_id, create_at
FROM
  follows
WHERE
  from_account_id = $1
`

func (q *Queries) ListFollowsByFromUserID(ctx context.Context, fromAccountID string) ([]Follow, error) {
	rows, err := q.db.Query(ctx, listFollowsByFromUserID, fromAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Follow{}
	for rows.Next() {
		var i Follow
		if err := rows.Scan(&i.ToAccountID, &i.FromAccountID, &i.CreateAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFollowsByToUserID = `-- name: ListFollowsByToUserID :many
SELECT
  to_account_id, from_account_id, create_at
FROM
  follows
WHERE
  to_account_id = $1
`

func (q *Queries) ListFollowsByToUserID(ctx context.Context, toAccountID string) ([]Follow, error) {
	rows, err := q.db.Query(ctx, listFollowsByToUserID, toAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Follow{}
	for rows.Next() {
		var i Follow
		if err := rows.Scan(&i.ToAccountID, &i.FromAccountID, &i.CreateAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
