// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: account_frameworks.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccountFrameworks = `-- name: CreateAccountFrameworks :one
INSERT INTO
    account_frameworks (account_id, framework_id)
VALUES
    ($1, $2) RETURNING account_id, framework_id
`

type CreateAccountFrameworksParams struct {
	AccountID   string `json:"account_id"`
	FrameworkID int32  `json:"framework_id"`
}

func (q *Queries) CreateAccountFrameworks(ctx context.Context, arg CreateAccountFrameworksParams) (AccountFramework, error) {
	row := q.db.QueryRow(ctx, createAccountFrameworks, arg.AccountID, arg.FrameworkID)
	var i AccountFramework
	err := row.Scan(&i.AccountID, &i.FrameworkID)
	return i, err
}

const deleteAccountFrameworkByUserID = `-- name: DeleteAccountFrameworkByUserID :exec
DELETE FROM
    account_frameworks
WHERE
    account_id = $1
`

func (q *Queries) DeleteAccountFrameworkByUserID(ctx context.Context, accountID string) error {
	_, err := q.db.Exec(ctx, deleteAccountFrameworkByUserID, accountID)
	return err
}

const listAccountFrameworksByUserID = `-- name: ListAccountFrameworksByUserID :many
SELECT
    frameworks.framework_id,
    frameworks.tech_tag_id,
    frameworks.framework,
    frameworks.icon
FROM
    account_frameworks
    LEFT OUTER JOIN frameworks ON account_frameworks.framework_id = frameworks.framework_id
WHERE
    account_frameworks.account_id = $1
`

type ListAccountFrameworksByUserIDRow struct {
	FrameworkID pgtype.Int4 `json:"framework_id"`
	TechTagID   pgtype.Int4 `json:"tech_tag_id"`
	Framework   pgtype.Text `json:"framework"`
	Icon        pgtype.Text `json:"icon"`
}

func (q *Queries) ListAccountFrameworksByUserID(ctx context.Context, accountID string) ([]ListAccountFrameworksByUserIDRow, error) {
	rows, err := q.db.Query(ctx, listAccountFrameworksByUserID, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAccountFrameworksByUserIDRow{}
	for rows.Next() {
		var i ListAccountFrameworksByUserIDRow
		if err := rows.Scan(
			&i.FrameworkID,
			&i.TechTagID,
			&i.Framework,
			&i.Icon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
