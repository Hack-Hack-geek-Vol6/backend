// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: role.sql

package repository

import (
	"context"
)

const createRoles = `-- name: CreateRoles :one
INSERT INTO roles (
    role
)VALUES($1)
RETURNING role_id, role
`

func (q *Queries) CreateRoles(ctx context.Context, role string) (Role, error) {
	row := q.db.QueryRow(ctx, createRoles, role)
	var i Role
	err := row.Scan(&i.RoleID, &i.Role)
	return i, err
}

const getRolesByID = `-- name: GetRolesByID :one
SELECT role_id, role FROM roles WHERE role_id = $1
`

func (q *Queries) GetRolesByID(ctx context.Context, roleID int32) (Role, error) {
	row := q.db.QueryRow(ctx, getRolesByID, roleID)
	var i Role
	err := row.Scan(&i.RoleID, &i.Role)
	return i, err
}

const listRoles = `-- name: ListRoles :many
SELECT role_id, role FROM roles
`

func (q *Queries) ListRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.Query(ctx, listRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.RoleID, &i.Role); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
